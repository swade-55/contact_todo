{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const fetchListsForContact = createAsyncThunk('lists/fetchListsForContact', async (contactId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/lists-for-contact/${contactId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch lists');\n    }\n    const lists = await response.json();\n    return lists;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchTodosForList = createAsyncThunk('todos/fetchTodosForList', async (listId, thunkAPI) => {\n  const response = await fetch(`/todos/${listId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch todos');\n  }\n  const todos = await response.json();\n  return todos;\n});\nexport const fetchTodosForContact = createAsyncThunk('lists/fetchTodosForContact', async (contactId, thunkAPI) => {\n  const response = await fetch(`/todos-for-contact/${contactId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch todos for contact');\n  }\n  const todos = await response.json();\n  return todos;\n});\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    lists: [],\n    todos: {},\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    // Reducers if needed\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchListsForContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchListsForContact.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchTodosForList.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchTodosForList.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Assuming action.meta.arg is the list ID\n      state.todos[action.meta.arg] = action.payload;\n    }).addCase(fetchTodosForList.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchTodosForContact.fulfilled, (state, action) => {\n      state.todosByContact[action.meta.arg] = action.payload;\n    }).addCase(fetchListsForContact.fulfilled, (state, action) => {\n      const contactId = action.meta.arg; // This should be the selectedContactId\n      state.listsByContact[contactId] = action.payload;\n      state.status = 'succeeded';\n    });\n  }\n});\nexport default listsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchListsForContact","contactId","rejectWithValue","response","fetch","ok","Error","lists","json","error","message","fetchTodosForList","listId","thunkAPI","todos","fetchTodosForContact","listsSlice","name","initialState","status","reducers","extraReducers","builder","addCase","pending","state","rejected","action","fulfilled","meta","arg","payload","todosByContact","listsByContact","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n\nexport const fetchListsForContact = createAsyncThunk(\n  'lists/fetchListsForContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/lists-for-contact/${contactId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch lists');\n      }\n      const lists = await response.json();\n      return lists;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n\nexport const fetchTodosForList = createAsyncThunk(\n  'todos/fetchTodosForList',\n  async (listId, thunkAPI) => {\n    const response = await fetch(`/todos/${listId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos');\n    }\n    const todos = await response.json();\n    return todos;\n  }\n);\n\nexport const fetchTodosForContact = createAsyncThunk(\n  'lists/fetchTodosForContact',\n  async (contactId, thunkAPI) => {\n    const response = await fetch(`/todos-for-contact/${contactId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos for contact');\n    }\n    const todos = await response.json();\n    return todos;\n  }\n);\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    lists: [],\n    todos: {},\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n    // Reducers if needed\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchListsForContact.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchListsForContact.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(fetchTodosForList.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchTodosForList.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Assuming action.meta.arg is the list ID\n        state.todos[action.meta.arg] = action.payload;\n      })\n      .addCase(fetchTodosForList.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(fetchTodosForContact.fulfilled, (state, action) => {\n        state.todosByContact[action.meta.arg] = action.payload;\n      })\n      .addCase(fetchListsForContact.fulfilled, (state, action) => {\n        const contactId = action.meta.arg; // This should be the selectedContactId\n        state.listsByContact[contactId] = action.payload;\n        state.status = 'succeeded';\n      });\n  },\n});\n\nexport default listsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAGhE,OAAO,MAAMC,oBAAoB,GAAGD,gBAAgB,CAClD,4BAA4B,EAC5B,OAAOE,SAAS,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sBAAqBH,SAAU,EAAC,CAAC;IAC/D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IACA,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IACnC,OAAOD,KAAK;EACd,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOP,eAAe,CAACO,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAGD,OAAO,MAAMC,iBAAiB,GAAGZ,gBAAgB,CAC/C,yBAAyB,EACzB,OAAOa,MAAM,EAAEC,QAAQ,KAAK;EAC1B,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,UAASQ,MAAO,EAAC,CAAC;EAChD,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACA,MAAMQ,KAAK,GAAG,MAAMX,QAAQ,CAACK,IAAI,CAAC,CAAC;EACnC,OAAOM,KAAK;AACd,CACF,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAGhB,gBAAgB,CAClD,4BAA4B,EAC5B,OAAOE,SAAS,EAAEY,QAAQ,KAAK;EAC7B,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,sBAAqBH,SAAU,EAAC,CAAC;EAC/D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;EACtD;EACA,MAAMQ,KAAK,GAAG,MAAMX,QAAQ,CAACK,IAAI,CAAC,CAAC;EACnC,OAAOM,KAAK;AACd,CACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAGlB,WAAW,CAAC;EACpCmB,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZX,KAAK,EAAE,EAAE;IACTO,KAAK,EAAE,CAAC,CAAC;IACTK,MAAM,EAAE,MAAM;IACdV,KAAK,EAAE;EACT,CAAC;EACDW,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACvB,oBAAoB,CAACwB,OAAO,EAAGC,KAAK,IAAK;MAChDA,KAAK,CAACN,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDI,OAAO,CAACvB,oBAAoB,CAAC0B,QAAQ,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACzDF,KAAK,CAACN,MAAM,GAAG,QAAQ;MACvBM,KAAK,CAAChB,KAAK,GAAGkB,MAAM,CAAClB,KAAK,CAACC,OAAO;IACpC,CAAC,CAAC,CACDa,OAAO,CAACZ,iBAAiB,CAACa,OAAO,EAAGC,KAAK,IAAK;MAC7CA,KAAK,CAACN,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDI,OAAO,CAACZ,iBAAiB,CAACiB,SAAS,EAAE,CAACH,KAAK,EAAEE,MAAM,KAAK;MACvDF,KAAK,CAACN,MAAM,GAAG,WAAW;MAC1B;MACAM,KAAK,CAACX,KAAK,CAACa,MAAM,CAACE,IAAI,CAACC,GAAG,CAAC,GAAGH,MAAM,CAACI,OAAO;IAC/C,CAAC,CAAC,CACDR,OAAO,CAACZ,iBAAiB,CAACe,QAAQ,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACN,MAAM,GAAG,QAAQ;MACvBM,KAAK,CAAChB,KAAK,GAAGkB,MAAM,CAAClB,KAAK,CAACC,OAAO;IACpC,CAAC,CAAC,CACDa,OAAO,CAACR,oBAAoB,CAACa,SAAS,EAAE,CAACH,KAAK,EAAEE,MAAM,KAAK;MAC1DF,KAAK,CAACO,cAAc,CAACL,MAAM,CAACE,IAAI,CAACC,GAAG,CAAC,GAAGH,MAAM,CAACI,OAAO;IACxD,CAAC,CAAC,CACDR,OAAO,CAACvB,oBAAoB,CAAC4B,SAAS,EAAE,CAACH,KAAK,EAAEE,MAAM,KAAK;MAC1D,MAAM1B,SAAS,GAAG0B,MAAM,CAACE,IAAI,CAACC,GAAG,CAAC,CAAC;MACnCL,KAAK,CAACQ,cAAc,CAAChC,SAAS,CAAC,GAAG0B,MAAM,CAACI,OAAO;MAChDN,KAAK,CAACN,MAAM,GAAG,WAAW;IAC5B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeH,UAAU,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}