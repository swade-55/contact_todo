{"ast":null,"code":"// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  companies: [],\n  status: 'idle',\n  error: null\n};\n\n// Async thunk for fetching companies\nexport const addCompany = createAsyncThunk('companies/addCompany', async (companyData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/companies', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const deleteCompany = createAsyncThunk('companies/deleteCompany', async (companyId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/companies/${companyId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return companyId; // Return the ID of the deleted company\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const updateCompany = createAsyncThunk('companies/updateCompany', async (companyData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/companies/${companyData.id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCompanies.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(fetchCompanies.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.companies = action.payload;\n    }).addCase(fetchCompanies.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addCompany.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(addCompany.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Append the new company to the existing array instead of replacing it\n      state.companies.push(action.payload);\n    }).addCase(addCompany.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(deleteCompany.fulfilled, (state, action) => {\n      state.companies = state.companies.filter(company => company.id !== action.payload);\n    }).addCase(updateCompany.fulfilled, (state, action) => {\n      const index = state.companies.findIndex(company => company.id === action.payload.id);\n      if (index !== -1) {\n        // Update the company in the array\n        state.companies[index] = action.payload;\n      } else {\n        // This case handles if for some reason the company is not found; you might decide to add it instead\n        console.warn(\"Updated company not found in the array\");\n        // Optionally add the company to the array\n        // state.companies.push(action.payload);\n      }\n    }).addCase(updateCompany.rejected, (state, action) => {\n      console.error('Updating company failed', action.error.message);\n      state.error = action.error.message;\n    });\n  }\n});\nexport default companiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","companies","status","error","addCompany","companyData","rejectWithValue","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","message","deleteCompany","companyId","updateCompany","id","companiesSlice","name","reducers","extraReducers","builder","addCase","fetchCompanies","pending","state","console","log","fulfilled","action","payload","rejected","push","filter","company","index","findIndex","warn","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/companiesSlice.js"],"sourcesContent":["// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  companies: [],\n  status: 'idle', \n  error: null,\n};\n\n// Async thunk for fetching companies\n  export const addCompany = createAsyncThunk('companies/addCompany', async (companyData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/companies', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n\n  export const deleteCompany = createAsyncThunk('companies/deleteCompany', async (companyId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/companies/${companyId}`, {\n        method: 'DELETE',\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return companyId;  // Return the ID of the deleted company\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  \n  \n  export const updateCompany = createAsyncThunk('companies/updateCompany', async (companyData, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/companies/${companyData.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    \n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompanies.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(fetchCompanies.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.companies = action.payload;\n      })\n      .addCase(fetchCompanies.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addCompany.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(addCompany.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Append the new company to the existing array instead of replacing it\n        state.companies.push(action.payload);\n      })\n      .addCase(addCompany.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(deleteCompany.fulfilled, (state, action) => {\n        state.companies = state.companies.filter(company => company.id !== action.payload);\n      })\n      .addCase(updateCompany.fulfilled, (state, action) => {\n        const index = state.companies.findIndex(company => company.id === action.payload.id);\n        if (index !== -1) {\n          // Update the company in the array\n          state.companies[index] = action.payload;\n        } else {\n          // This case handles if for some reason the company is not found; you might decide to add it instead\n          console.warn(\"Updated company not found in the array\");\n          // Optionally add the company to the array\n          // state.companies.push(action.payload);\n        }\n      })\n      .addCase(updateCompany.rejected, (state, action) => {\n        console.error('Updating company failed', action.error.message);\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default companiesSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}