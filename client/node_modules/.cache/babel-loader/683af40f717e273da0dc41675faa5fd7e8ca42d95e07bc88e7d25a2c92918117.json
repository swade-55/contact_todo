{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunk\nexport const fetchListsForContact = createAsyncThunk('lists/fetchListsForContact', async (contactId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/lists-for-contact/${contactId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch lists');\n    }\n    const data = await response.json();\n    // Directly return the data which should be an array\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    listsByContact: {},\n    todos: {},\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchListsForContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchListsForContact.rejected, (state, action) => {\n      var _action$payload;\n      state.status = 'failed';\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) || 'An unknown error occurred';\n    }).addCase(fetchListsForContact.fulfilled, (state, action) => {\n      // Log the action payload\n      console.log('Fulfilled action payload:', action.payload);\n      // Update state with the new array of lists for the contactId\n      state.listsByContact[action.meta.arg] = action.payload;\n      state.status = 'succeeded';\n    });\n  }\n});\nexport default listsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchListsForContact","contactId","rejectWithValue","response","fetch","ok","Error","data","json","error","message","listsSlice","name","initialState","listsByContact","todos","status","reducers","extraReducers","builder","addCase","pending","state","rejected","action","_action$payload","payload","fulfilled","console","log","meta","arg","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunk\nexport const fetchListsForContact = createAsyncThunk(\n  'lists/fetchListsForContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/lists-for-contact/${contactId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch lists');\n      }\n      const data = await response.json();\n      // Directly return the data which should be an array\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    listsByContact: {},\n    todos: {},\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchListsForContact.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchListsForContact.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchListsForContact.fulfilled, (state, action) => {\n        // Log the action payload\n        console.log('Fulfilled action payload:', action.payload); \n        // Update state with the new array of lists for the contactId\n        state.listsByContact[action.meta.arg] = action.payload;\n        state.status = 'succeeded';\n      });\n  },\n});\n\nexport default listsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;;AAEhE;AACA,OAAO,MAAMC,oBAAoB,GAAGD,gBAAgB,CAClD,4BAA4B,EAC5B,OAAOE,SAAS,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sBAAqBH,SAAU,EAAC,CAAC;IAC/D,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC;IACA,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOP,eAAe,CAACO,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAGD,OAAO,MAAMC,UAAU,GAAGb,WAAW,CAAC;EACpCc,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,cAAc,EAAE,CAAC,CAAC;IAClBC,KAAK,EAAE,CAAC,CAAC;IACTC,MAAM,EAAE,MAAM;IACdP,KAAK,EAAE;EACT,CAAC;EACDQ,QAAQ,EAAE,CACV,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACpB,oBAAoB,CAACqB,OAAO,EAAGC,KAAK,IAAK;MAChDA,KAAK,CAACN,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDI,OAAO,CAACpB,oBAAoB,CAACuB,QAAQ,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAAA,IAAAC,eAAA;MACzDH,KAAK,CAACN,MAAM,GAAG,QAAQ;MACvBM,KAAK,CAACb,KAAK,GAAG,EAAAgB,eAAA,GAAAD,MAAM,CAACE,OAAO,cAAAD,eAAA,uBAAdA,eAAA,CAAgBf,OAAO,KAAI,2BAA2B;IACtE,CAAC,CAAC,CACDU,OAAO,CAACpB,oBAAoB,CAAC2B,SAAS,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC1D;MACAI,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEL,MAAM,CAACE,OAAO,CAAC;MACxD;MACAJ,KAAK,CAACR,cAAc,CAACU,MAAM,CAACM,IAAI,CAACC,GAAG,CAAC,GAAGP,MAAM,CAACE,OAAO;MACtDJ,KAAK,CAACN,MAAM,GAAG,WAAW;IAC5B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeL,UAAU,CAACqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}