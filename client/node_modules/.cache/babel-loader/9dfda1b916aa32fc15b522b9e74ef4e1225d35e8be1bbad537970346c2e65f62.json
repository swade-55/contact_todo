{"ast":null,"code":"// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  companies: [],\n  status: 'idle',\n  // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async (userId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/companies/${userId}`);\n    if (!response.ok) {\n      // Throw an error with the response status if the request was not successful\n      throw new Error(`Request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    // Return a custom error message or the error object\n    return rejectWithValue(error.message || 'Could not fetch companies');\n  }\n});\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCompanies.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(fetchCompanies.fulfilled, (state, action) => {\n      console.log('Fetching companies: Succeeded', action.payload);\n      state.status = 'succeeded';\n      state.companies = action.payload;\n    }).addCase(fetchCompanies.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default companiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","companies","status","error","fetchCompanies","userId","rejectWithValue","response","fetch","ok","Error","data","json","message","companiesSlice","name","reducers","extraReducers","builder","addCase","pending","state","console","log","fulfilled","action","payload","rejected","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/companiesSlice.js"],"sourcesContent":["// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  companies: [],\n  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async (userId, { rejectWithValue }) => {\n  try {\n    const response = await fetch(`/companies/${userId}`);\n    if (!response.ok) {\n      // Throw an error with the response status if the request was not successful\n      throw new Error(`Request failed with status ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    // Return a custom error message or the error object\n    return rejectWithValue(error.message || 'Could not fetch companies');\n  }\n});\n\n  \n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompanies.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(fetchCompanies.fulfilled, (state, action) => {\n        console.log('Fetching companies: Succeeded', action.payload);\n        state.status = 'succeeded';\n        state.companies = action.payload;\n      })\n      .addCase(fetchCompanies.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default companiesSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,0BAA0B,EAAE,OAAOM,MAAM,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChH,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaH,MAAO,EAAC,CAAC;IACpD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB;MACA,MAAM,IAAIC,KAAK,CAAE,8BAA6BH,QAAQ,CAACL,MAAO,EAAC,CAAC;IAClE;IACA,MAAMS,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOR,KAAK,EAAE;IACd;IACA,OAAOG,eAAe,CAACH,KAAK,CAACU,OAAO,IAAI,2BAA2B,CAAC;EACtE;AACF,CAAC,CAAC;AAIF,OAAO,MAAMC,cAAc,GAAGhB,WAAW,CAAC;EACxCiB,IAAI,EAAE,WAAW;EACjBf,YAAY;EACZgB,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,cAAc,CAACgB,OAAO,EAAGC,KAAK,IAAK;MAC1CC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CF,KAAK,CAACnB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDiB,OAAO,CAACf,cAAc,CAACoB,SAAS,EAAE,CAACH,KAAK,EAAEI,MAAM,KAAK;MACpDH,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEE,MAAM,CAACC,OAAO,CAAC;MAC5DL,KAAK,CAACnB,MAAM,GAAG,WAAW;MAC1BmB,KAAK,CAACpB,SAAS,GAAGwB,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CACDP,OAAO,CAACf,cAAc,CAACuB,QAAQ,EAAE,CAACN,KAAK,EAAEI,MAAM,KAAK;MACnDH,OAAO,CAACnB,KAAK,CAAC,4BAA4B,EAAEsB,MAAM,CAACtB,KAAK,CAACU,OAAO,CAAC;MACjEQ,KAAK,CAACnB,MAAM,GAAG,QAAQ;MACvBmB,KAAK,CAAClB,KAAK,GAAGsB,MAAM,CAACtB,KAAK,CAACU,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeC,cAAc,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}