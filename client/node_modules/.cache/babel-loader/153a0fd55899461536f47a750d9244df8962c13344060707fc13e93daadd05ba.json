{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const fetchListsForContact = createAsyncThunk('lists/fetchListsForContact', async (contactId, thunkAPI) => {\n  const response = await fetch(`/lists/${contactId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch lists');\n  }\n  const lists = await response.json();\n  return lists;\n});\nexport const fetchTodosForList = createAsyncThunk('todos/fetchTodosForList', async (listId, thunkAPI) => {\n  const response = await fetch(`/todos/${listId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch todos');\n  }\n  const todos = await response.json();\n  return todos;\n});\nexport const fetchTodosForContact = createAsyncThunk('lists/fetchTodosForContact', async (contactId, thunkAPI) => {\n  const response = await fetch(`/todos-for-contact/${contactId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch todos for contact');\n  }\n  const todos = await response.json();\n  return todos;\n});\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    lists: [],\n    todos: {},\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    // Reducers if needed\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchListsForContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchListsForContact.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.lists = action.payload;\n    }).addCase(fetchListsForContact.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchTodosForList.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchTodosForList.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Assuming action.meta.arg is the list ID\n      state.todos[action.meta.arg] = action.payload;\n    }).addCase(fetchTodosForList.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default listsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchListsForContact","contactId","thunkAPI","response","fetch","ok","Error","lists","json","fetchTodosForList","listId","todos","fetchTodosForContact","listsSlice","name","initialState","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","meta","arg","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const fetchListsForContact = createAsyncThunk(\n  'lists/fetchListsForContact',\n  async (contactId, thunkAPI) => {\n    const response = await fetch(`/lists/${contactId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch lists');\n    }\n    const lists = await response.json();\n    return lists;\n  }\n);\n\nexport const fetchTodosForList = createAsyncThunk(\n  'todos/fetchTodosForList',\n  async (listId, thunkAPI) => {\n    const response = await fetch(`/todos/${listId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos');\n    }\n    const todos = await response.json();\n    return todos;\n  }\n);\n\nexport const fetchTodosForContact = createAsyncThunk(\n  'lists/fetchTodosForContact',\n  async (contactId, thunkAPI) => {\n    const response = await fetch(`/todos-for-contact/${contactId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos for contact');\n    }\n    const todos = await response.json();\n    return todos;\n  }\n);\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    lists: [],\n    todos: {},\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n    // Reducers if needed\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchListsForContact.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchListsForContact.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.lists = action.payload;\n      })\n      .addCase(fetchListsForContact.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(fetchTodosForList.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchTodosForList.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Assuming action.meta.arg is the list ID\n        state.todos[action.meta.arg] = action.payload;\n      })\n      .addCase(fetchTodosForList.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default listsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}