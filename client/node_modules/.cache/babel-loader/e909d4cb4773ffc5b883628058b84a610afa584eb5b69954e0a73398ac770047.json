{"ast":null,"code":"// contactsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  contacts: [],\n  status: 'idle',\n  error: null\n};\nexport const addContact = createAsyncThunk('contacts/addContact', async (contactData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/contacts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(contactData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchAllContacts = createAsyncThunk('contacts/fetchAllContacts', async () => {\n  const response = await fetch('/contacts-lists');\n  if (!response.ok) {\n    throw new Error('Could not fetch contacts');\n  }\n  return await response.json();\n});\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async userId => {\n  const url = `/companies/${userId}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    console.error(`HTTP error! status: ${response.status}`);\n    throw new Error('Could not fetch companies');\n  }\n  const data = await response.json();\n  return data;\n});\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAllContacts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllContacts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Set the contacts to the fetched data\n      state.contacts = action.payload;\n    }).addCase(fetchAllContacts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(addContact.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.contacts.push(action.payload);\n    }).addCase(addContact.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default contactsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","contacts","status","error","addContact","contactData","rejectWithValue","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","message","fetchAllContacts","fetchCompanies","userId","url","console","data","contactsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","push","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/contactsSlice.js"],"sourcesContent":["// contactsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  contacts: [],\n  status: 'idle',\n  error: null,\n};\n\nexport const addContact = createAsyncThunk('contacts/addContact',async(contactData,{rejectWithValue})=>{\n  try{\n    const response = await fetch('/contacts',{\n      method:'POST',\n      headers:{\n        'Content-Type':'application/json',\n      },\n      body:JSON.stringify(contactData)\n    });\n    if (!response.ok){\n      throw new Error('Network response was not ok')\n    }\n    return response.json();\n  } catch (error){\n    return rejectWithValue(error.message)\n  }\n});\n\n\nexport const fetchAllContacts = createAsyncThunk('contacts/fetchAllContacts', async () => {\n  const response = await fetch('/contacts-lists');\n  if (!response.ok) {\n    throw new Error('Could not fetch contacts');\n  }\n  return await response.json();\n});\n\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async (userId) => {\n  const url = `/companies/${userId}`; \n  const response = await fetch(url);\n\n  if (!response.ok) {\n    console.error(`HTTP error! status: ${response.status}`);\n    throw new Error('Could not fetch companies');\n  }\n\n  const data = await response.json();\n  return data;\n});\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAllContacts.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllContacts.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Set the contacts to the fetched data\n        state.contacts = action.payload;\n      })\n      .addCase(fetchAllContacts.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addContact.pending,(state)=>{\n        state.status='loading';\n      })\n      .addCase(addContact.fulfilled,(state,action)=>{\n        state.status='succeeded';\n        state.contacts.push(action.payload)\n      })\n      .addCase(addContact.rejected,(state,action)=>{\n        state.status='failed';\n        state.error=action.error.message;\n      })\n  },\n});\n\nexport default contactsSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGL,gBAAgB,CAAC,qBAAqB,EAAC,OAAMM,WAAW,EAAC;EAACC;AAAe,CAAC,KAAG;EACrG,IAAG;IACD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,EAAC;MACvCC,MAAM,EAAC,MAAM;MACbC,OAAO,EAAC;QACN,cAAc,EAAC;MACjB,CAAC;MACDC,IAAI,EAACC,IAAI,CAACC,SAAS,CAACR,WAAW;IACjC,CAAC,CAAC;IACF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAC;MACf,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAOR,QAAQ,CAACS,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOb,KAAK,EAAC;IACb,OAAOG,eAAe,CAACH,KAAK,CAACc,OAAO,CAAC;EACvC;AACF,CAAC,CAAC;AAGF,OAAO,MAAMC,gBAAgB,GAAGnB,gBAAgB,CAAC,2BAA2B,EAAE,YAAY;EACxF,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,CAAC;EAC/C,IAAI,CAACD,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EACA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;AAC9B,CAAC,CAAC;AAEF,OAAO,MAAMG,cAAc,GAAGpB,gBAAgB,CAAC,0BAA0B,EAAE,MAAOqB,MAAM,IAAK;EAC3F,MAAMC,GAAG,GAAI,cAAaD,MAAO,EAAC;EAClC,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAACa,GAAG,CAAC;EAEjC,IAAI,CAACd,QAAQ,CAACO,EAAE,EAAE;IAChBQ,OAAO,CAACnB,KAAK,CAAE,uBAAsBI,QAAQ,CAACL,MAAO,EAAC,CAAC;IACvD,MAAM,IAAIa,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,MAAMQ,IAAI,GAAG,MAAMhB,QAAQ,CAACS,IAAI,CAAC,CAAC;EAClC,OAAOO,IAAI;AACb,CAAC,CAAC;AAEF,OAAO,MAAMC,aAAa,GAAG1B,WAAW,CAAC;EACvC2B,IAAI,EAAE,UAAU;EAChBzB,YAAY;EACZ0B,QAAQ,EAAE,CACV,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,gBAAgB,CAACY,OAAO,EAAGC,KAAK,IAAK;MAC5CA,KAAK,CAAC7B,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACD2B,OAAO,CAACX,gBAAgB,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAAC7B,MAAM,GAAG,WAAW;MAC1B;MACA6B,KAAK,CAAC9B,QAAQ,GAAGgC,MAAM,CAACC,OAAO;IACjC,CAAC,CAAC,CACDL,OAAO,CAACX,gBAAgB,CAACiB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACrDF,KAAK,CAAC7B,MAAM,GAAG,QAAQ;MACvB6B,KAAK,CAAC5B,KAAK,GAAG8B,MAAM,CAAC9B,KAAK,CAACc,OAAO;IACpC,CAAC,CAAC,CACDY,OAAO,CAACzB,UAAU,CAAC0B,OAAO,EAAEC,KAAK,IAAG;MACnCA,KAAK,CAAC7B,MAAM,GAAC,SAAS;IACxB,CAAC,CAAC,CACD2B,OAAO,CAACzB,UAAU,CAAC4B,SAAS,EAAC,CAACD,KAAK,EAACE,MAAM,KAAG;MAC5CF,KAAK,CAAC7B,MAAM,GAAC,WAAW;MACxB6B,KAAK,CAAC9B,QAAQ,CAACmC,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IACrC,CAAC,CAAC,CACDL,OAAO,CAACzB,UAAU,CAAC+B,QAAQ,EAAC,CAACJ,KAAK,EAACE,MAAM,KAAG;MAC3CF,KAAK,CAAC7B,MAAM,GAAC,QAAQ;MACrB6B,KAAK,CAAC5B,KAAK,GAAC8B,MAAM,CAAC9B,KAAK,CAACc,OAAO;IAClC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeO,aAAa,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}