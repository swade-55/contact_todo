{"ast":null,"code":"// contactsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  contacts: [],\n  status: 'idle',\n  error: null\n};\nexport const addContact = createAsyncThunk('contacts/addContact', async (contactData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/contacts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(contactData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchAllContacts = createAsyncThunk('contacts/fetchAllContacts', async userId => {\n  const url = `/contacts-lists/${userId}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    console.error(`HTTP error! status: ${response.status}`);\n    throw new Error('Could not fetch contacts');\n  }\n  const data = await response.json();\n  return data;\n});\nexport const addList = createAsyncThunk('lists/addList', async (listData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/lists', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(listData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add list');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const addTodo = createAsyncThunk('todos/addTodo', async (todoData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/todos', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: todoData.title,\n        description: todoData.description,\n        completed: todoData.completed,\n        dueDate: todoData.due_date,\n        listId: todoData.list_id,\n        tags: todoData.tags\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add todo');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchAllContacts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllContacts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Set the contacts to the fetched data\n      state.contacts = action.payload;\n    }).addCase(fetchAllContacts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(addContact.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.contacts.push(action.payload);\n    }).addCase(addContact.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addList.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      const {\n        contact_id,\n        ...listData\n      } = action.payload;\n      const contactIndex = state.contacts.findIndex(contact => contact.id === contact_id);\n      // if (contactIndex !== -1) {\n      //   if (!state.contacts[contactIndex].lists) {\n      //     state.contacts[contactIndex].lists = [];\n      //   }\n      //   state.contacts[contactIndex].lists.push(listData);\n      // }\n      state.contacts[contactIndex].lists.push(listData);\n    }).addCase(addTodo.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      const {\n        list_id,\n        ...todoData\n      } = action.payload;\n      state.contacts.forEach(contact => {\n        var _contact$lists;\n        (_contact$lists = contact.lists) === null || _contact$lists === void 0 ? void 0 : _contact$lists.forEach(list => {\n          if (list.id === list_id) {\n            if (!list.todos) {\n              list.todos = [];\n            }\n            list.todos.push(todoData);\n          }\n        });\n      });\n    });\n  }\n});\nexport default contactsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","contacts","status","error","addContact","contactData","rejectWithValue","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","message","fetchAllContacts","userId","url","console","data","addList","listData","addTodo","todoData","title","description","completed","dueDate","due_date","listId","list_id","tags","contactsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","push","contact_id","contactIndex","findIndex","contact","id","lists","forEach","_contact$lists","list","todos","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/contactsSlice.js"],"sourcesContent":["// contactsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  contacts: [],\n  status: 'idle',\n  error: null,\n};\n\nexport const addContact = createAsyncThunk('contacts/addContact',async(contactData,{rejectWithValue})=>{\n  try{\n    const response = await fetch('/contacts',{\n      method:'POST',\n      headers:{\n        'Content-Type':'application/json',\n      },\n      body:JSON.stringify(contactData)\n    });\n    if (!response.ok){\n      throw new Error('Network response was not ok')\n    }\n    return response.json();\n  } catch (error){\n    return rejectWithValue(error.message)\n  }\n});\n\n\nexport const fetchAllContacts = createAsyncThunk('contacts/fetchAllContacts', async (userId) => {\n  const url = `/contacts-lists/${userId}`; \n  const response = await fetch(url);\n\n  if (!response.ok) {\n    console.error(`HTTP error! status: ${response.status}`);\n    throw new Error('Could not fetch contacts');\n  }\n\n  const data = await response.json();\n  return data;\n});\n\nexport const addList = createAsyncThunk(\n  'lists/addList',\n  async (listData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/lists', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(listData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add list');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addTodo = createAsyncThunk(\n  'todos/addTodo',\n  async (todoData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: todoData.title,\n          description: todoData.description,\n          completed: todoData.completed,\n          dueDate: todoData.due_date, \n          listId: todoData.list_id,   \n          tags: todoData.tags,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add todo');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchAllContacts.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllContacts.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Set the contacts to the fetched data\n        state.contacts = action.payload;\n      })\n      .addCase(fetchAllContacts.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addContact.pending,(state)=>{\n        state.status='loading';\n      })\n      .addCase(addContact.fulfilled,(state,action)=>{\n        state.status='succeeded';\n        state.contacts.push(action.payload)\n      })\n      .addCase(addContact.rejected,(state,action)=>{\n        state.status='failed';\n        state.error=action.error.message;\n      })\n      .addCase(addList.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        const { contact_id, ...listData } = action.payload;\n        const contactIndex = state.contacts.findIndex(contact => contact.id === contact_id);\n        // if (contactIndex !== -1) {\n        //   if (!state.contacts[contactIndex].lists) {\n        //     state.contacts[contactIndex].lists = [];\n        //   }\n        //   state.contacts[contactIndex].lists.push(listData);\n        // }\n        state.contacts[contactIndex].lists.push(listData);\n      })\n      .addCase(addTodo.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        const { list_id, ...todoData } = action.payload;\n        state.contacts.forEach(contact => {\n          contact.lists?.forEach(list => {\n            if (list.id === list_id) {\n              if (!list.todos) {\n                list.todos = [];\n              }\n              list.todos.push(todoData);\n            }\n          });\n        });\n      });\n  },\n});\n\nexport default contactsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}