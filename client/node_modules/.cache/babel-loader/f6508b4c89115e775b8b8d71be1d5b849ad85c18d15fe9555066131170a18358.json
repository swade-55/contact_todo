{"ast":null,"code":"var _jsxFileName = \"/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/ManageContacts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { useTable } from 'react-table';\nimport { fetchContacts } from './slices/contactsSlice';\nimport { fetchCompanies } from './slices/companiesSlice';\nimport '../styles/ManageContacts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageContacts = () => {\n  _s();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [selectedCompanyId, setSelectedCompanyId] = useState('');\n  const companies = useSelector(state => state.companies.companies);\n  const contacts = useSelector(state => state.contacts.contacts);\n  console.log(contacts);\n\n  // useEffect(()=>{\n  //   dispatch(fetchCompanies())\n  // },[dispatch])\n\n  // useEffect(()=>{\n  //   if (selectedCompanyId){\n  //       dispatch(fetchContacts(selectedCompanyId))\n  //   }\n\n  // },[selectedCompanyId,dispatch])\n\n  // useEffect(() => {\n  //   if (!contacts) {\n  //     contacts = [];\n  //   }\n  // }, [contacts]);\n\n  const columns = React.useMemo(() => [{\n    Header: 'ID',\n    accessor: 'id'\n  }, {\n    Header: 'Name',\n    accessor: 'name'\n  }, {\n    Header: 'Last Contact Date',\n    accessor: 'last_contact_date'\n  }, {\n    Header: 'Current Status',\n    accessor: 'status'\n  }], []);\n  const handleCompanyChange = event => {\n    setSelectedCompanyId(event.target.value);\n  };\n  const handleBack = () => {\n    navigate('/');\n  };\n  const handleAddContactClick = () => {\n    navigate('/add-contact');\n  };\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data: contacts\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ManageContacts-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleBack,\n      children: \"Back to Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddContactClick,\n      children: \"Add New Contact\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCompanyId,\n      onChange: handleCompanyChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a Company\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), companies.map(company => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: company.id,\n        children: company.name\n      }, company.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        ...getTableProps(),\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n              ...column.getHeaderProps(),\n              children: column.render('Header')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          ...getTableBodyProps(),\n          children: rows.map(row => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              ...row.getRowProps(),\n              children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n                ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageContacts, \"uRhT4saJjrQAM1v4fmPKT7e0wqA=\", false, function () {\n  return [useDispatch, useNavigate, useSelector, useSelector, useTable];\n});\n_c = ManageContacts;\nexport default ManageContacts;\nvar _c;\n$RefreshReg$(_c, \"ManageContacts\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","useNavigate","useTable","fetchContacts","fetchCompanies","jsxDEV","_jsxDEV","ManageContacts","_s","dispatch","navigate","selectedCompanyId","setSelectedCompanyId","companies","state","contacts","console","log","columns","useMemo","Header","accessor","handleCompanyChange","event","target","value","handleBack","handleAddContactClick","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","data","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","company","id","name","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","_c","$RefreshReg$"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/ManageContacts.js"],"sourcesContent":["import React, {useState,useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {useNavigate} from 'react-router-dom'\nimport { useTable } from 'react-table'; \nimport {fetchContacts} from './slices/contactsSlice'\nimport {fetchCompanies} from './slices/companiesSlice'\nimport '../styles/ManageContacts.css';\n\nconst ManageContacts = () => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [selectedCompanyId,setSelectedCompanyId] = useState('')\n\n  const companies = useSelector(state=>state.companies.companies)\n  const contacts = useSelector((state) => state.contacts.contacts);\n  console.log(contacts);\n\n  // useEffect(()=>{\n  //   dispatch(fetchCompanies())\n  // },[dispatch])\n\n  // useEffect(()=>{\n  //   if (selectedCompanyId){\n  //       dispatch(fetchContacts(selectedCompanyId))\n  //   }\n\n  // },[selectedCompanyId,dispatch])\n\n  // useEffect(() => {\n  //   if (!contacts) {\n  //     contacts = [];\n  //   }\n  // }, [contacts]);\n\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'ID',\n        accessor: 'id', \n      },\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header:'Last Contact Date',\n        accessor: 'last_contact_date'\n      },\n      {\n        Header:'Current Status',\n        accessor:'status'\n      },\n    ],\n    []\n  );\n\n  const handleCompanyChange = (event)=>{\n    setSelectedCompanyId(event.target.value)\n  }\n\n  const handleBack = ()=>{\n    navigate('/')\n  }\n\n  const handleAddContactClick = ()=>{\n    navigate('/add-contact')\n  }\n  \n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data: contacts });\n\n  return (\n    <div className=\"ManageContacts-container\">\n      <button onClick={handleBack}>Back to Home</button>\n      <button onClick={handleAddContactClick}>Add New Contact</button>\n      <select value={selectedCompanyId} onChange={handleCompanyChange}>\n        <option value=\"\">Select a Company</option>\n        {companies.map((company) => (\n          <option key={company.id} value={company.id}>\n            {company.name}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"container\">\n      <table {...getTableProps()} className=\"table\">\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => (\n                  <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n    </div>\n    \n    \n  );\n};\n\nexport default ManageContacts;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}