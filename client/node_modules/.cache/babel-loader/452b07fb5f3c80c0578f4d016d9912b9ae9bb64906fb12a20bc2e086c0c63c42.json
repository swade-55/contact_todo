{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const fetchListsForUser = createAsyncThunk('lists/fetchForUser', async (userId, thunkAPI) => {\n  const response = await fetch(`/users/${userId}/lists`);\n  const lists = await Response.json();\n  return lists;\n});\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    lists: [],\n    status: 'idle',\n    error: null,\n    selectedListId: null\n  },\n  reducers: {\n    setLists: (state, action) => {\n      state.lists = action.payload;\n    },\n    selectList: (state, action) => {\n      state.selectedListId = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    // Fix the case and use builder callback notation\n    builder.addCase(fetchListsForUser.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.lists = action.payload;\n    });\n  }\n});\nexport const {\n  setLists,\n  selectList\n} = listsSlice.actions;\nexport default listsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchListsForUser","userId","thunkAPI","response","fetch","lists","Response","json","listsSlice","name","initialState","status","error","selectedListId","reducers","setLists","state","action","payload","selectList","extraReducers","builder","addCase","fulfilled","actions","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const fetchListsForUser = createAsyncThunk(\n    'lists/fetchForUser',\n    async (userId,thunkAPI)=>{\n        const response = await fetch(`/users/${userId}/lists`)\n        const lists = await Response.json()\n        return lists\n    }\n)\n\nexport const listsSlice = createSlice({\n    name:'lists',\n    initialState:{\n        lists:[],\n        status:'idle',\n        error:null,\n        selectedListId:null,\n    },\n    reducers:{\n        setLists:(state,action)=>{\n            state.lists=action.payload;\n        },\n        selectList: (state,action)=>{\n            state.selectedListId=action.payload\n        }\n    },\n    extraReducers: (builder) => { // Fix the case and use builder callback notation\n        builder\n          .addCase(fetchListsForUser.fulfilled, (state, action) => {\n            state.status = 'succeeded';\n            state.lists = action.payload;\n          });\n      },\n    });\n\nexport const {setLists,selectList} = listsSlice.actions;\nexport default listsSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,iBAAiB,GAAGF,gBAAgB,CAC7C,oBAAoB,EACpB,OAAOG,MAAM,EAACC,QAAQ,KAAG;EACrB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,UAASH,MAAO,QAAO,CAAC;EACtD,MAAMI,KAAK,GAAG,MAAMC,QAAQ,CAACC,IAAI,CAAC,CAAC;EACnC,OAAOF,KAAK;AAChB,CACJ,CAAC;AAED,OAAO,MAAMG,UAAU,GAAGT,WAAW,CAAC;EAClCU,IAAI,EAAC,OAAO;EACZC,YAAY,EAAC;IACTL,KAAK,EAAC,EAAE;IACRM,MAAM,EAAC,MAAM;IACbC,KAAK,EAAC,IAAI;IACVC,cAAc,EAAC;EACnB,CAAC;EACDC,QAAQ,EAAC;IACLC,QAAQ,EAACA,CAACC,KAAK,EAACC,MAAM,KAAG;MACrBD,KAAK,CAACX,KAAK,GAACY,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDC,UAAU,EAAEA,CAACH,KAAK,EAACC,MAAM,KAAG;MACxBD,KAAK,CAACH,cAAc,GAACI,MAAM,CAACC,OAAO;IACvC;EACJ,CAAC;EACDE,aAAa,EAAGC,OAAO,IAAK;IAAE;IAC1BA,OAAO,CACJC,OAAO,CAACtB,iBAAiB,CAACuB,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACL,MAAM,GAAG,WAAW;MAC1BK,KAAK,CAACX,KAAK,GAAGY,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEN,OAAO,MAAM;EAACH,QAAQ;EAACI;AAAU,CAAC,GAAGX,UAAU,CAACgB,OAAO;AACvD,eAAehB,UAAU,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}