{"ast":null,"code":"var _jsxFileName = \"/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/ManageContacts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTable } from 'react-table';\nimport { fetchContacts } from './slices/contactsSlice';\nimport { fetchCompanies } from './slices/companiesSlice';\nimport '../styles/ManageContacts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageContacts = () => {\n  _s();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [selectedCompanyId, setSelectedCompanyId] = useState('');\n\n  // Retrieve companies and contacts from Redux store\n  const companies = useSelector(state => state.companies.companies);\n  const contacts = useSelector(state => state.contacts.contacts);\n  useEffect(() => {\n    dispatch(fetchCompanies());\n  }, [dispatch]);\n  useEffect(() => {\n    if (selectedCompanyId) {\n      dispatch(fetchContacts(selectedCompanyId));\n    }\n  }, [selectedCompanyId, dispatch]);\n\n  // Define columns for react-table\n  const columns = React.useMemo(() => [{\n    Header: 'ID',\n    accessor: 'id' // accessor is the \"key\" in the data\n  }, {\n    Header: 'Name',\n    accessor: 'name'\n  }, {\n    Header: 'Last Contact Date',\n    accessor: 'last_contact_date'\n  }, {\n    Header: 'Current Status',\n    accessor: 'status'\n  }\n  // Add more columns as needed\n  ], []);\n  const handleCompanyChange = event => {\n    setSelectedCompanyId(event.target.value);\n  };\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data: contacts\n  });\n\n  // Render the table UI using react-table's UI construction methods\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ManageContacts-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCompanyId,\n      onChange: handleCompanyChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a Company\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), companies.map(company => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: company.id,\n        children: company.name\n      }, company.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        ...getTableProps(),\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", {\n            ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", {\n              ...column.getHeaderProps(),\n              children: column.render('Header')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          ...getTableBodyProps(),\n          children: rows.map(row => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              ...row.getRowProps(),\n              children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n                ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageContacts, \"+kaka02y6oNEDHgwcKBJPcxLWOg=\", true, function () {\n  return [useDispatch, useSelector, useSelector, useTable];\n});\n_c = ManageContacts;\nexport default ManageContacts;\nvar _c;\n$RefreshReg$(_c, \"ManageContacts\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","useTable","fetchContacts","fetchCompanies","jsxDEV","_jsxDEV","ManageContacts","_s","dispatch","navigate","useNavigate","selectedCompanyId","setSelectedCompanyId","companies","state","contacts","columns","useMemo","Header","accessor","handleCompanyChange","event","target","value","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","data","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","company","id","name","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","_c","$RefreshReg$"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/ManageContacts.js"],"sourcesContent":["import React, {useState,useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTable } from 'react-table'; \nimport {fetchContacts} from './slices/contactsSlice'\nimport {fetchCompanies} from './slices/companiesSlice'\nimport '../styles/ManageContacts.css';\n\nconst ManageContacts = () => {\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const [selectedCompanyId,setSelectedCompanyId] = useState('')\n\n  // Retrieve companies and contacts from Redux store\n  const companies = useSelector(state=>state.companies.companies)\n  const contacts = useSelector((state) => state.contacts.contacts);\n\n  useEffect(()=>{\n    dispatch(fetchCompanies())\n  },[dispatch])\n\n  useEffect(()=>{\n    if (selectedCompanyId){\n        dispatch(fetchContacts(selectedCompanyId))\n    }\n  },[selectedCompanyId,dispatch])\n\n\n  // Define columns for react-table\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'ID',\n        accessor: 'id', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header:'Last Contact Date',\n        accessor: 'last_contact_date'\n      },\n      {\n        Header:'Current Status',\n        accessor:'status'\n      },\n      // Add more columns as needed\n    ],\n    []\n  );\n\n  const handleCompanyChange = (event)=>{\n    setSelectedCompanyId(event.target.value)\n  }\n  \n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data: contacts });\n\n  // Render the table UI using react-table's UI construction methods\n  return (\n    <div className=\"ManageContacts-container\">\n      {/* Dropdown for selecting company */}\n      <select value={selectedCompanyId} onChange={handleCompanyChange}>\n        <option value=\"\">Select a Company</option>\n        {companies.map((company) => (\n          <option key={company.id} value={company.id}>\n            {company.name}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"container\">\n      <table {...getTableProps()} className=\"table\">\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map(row => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => (\n                  <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n    </div>\n    \n    \n  );\n};\n\nexport default ManageContacts;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}