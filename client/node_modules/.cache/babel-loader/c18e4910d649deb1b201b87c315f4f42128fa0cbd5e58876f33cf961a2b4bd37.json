{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const fetchListsForContact = createAsyncThunk('lists/fetchListsForContact', async (contactId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/lists-for-contact/${contactId}`);\n    console.log('Raw response:', response);\n    if (!response.ok) {\n      throw new Error('Failed to fetch lists');\n    }\n    const data = await response.json();\n    console.log('API response:', data);\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// export const fetchTodosForList = createAsyncThunk(\n//   'todos/fetchTodosForList',\n//   async (listId, thunkAPI) => {\n//     const response = await fetch(`/todos/${listId}`);\n//     if (!response.ok) {\n//       throw new Error('Failed to fetch todos');\n//     }\n//     const todos = await response.json();\n//     return todos;\n//   }\n// );\n\n// export const fetchTodosForContact = createAsyncThunk(\n//   'lists/fetchTodosForContact',\n//   async (contactId, thunkAPI) => {\n//     const response = await fetch(`/todos-for-contact/${contactId}`);\n//     if (!response.ok) {\n//       throw new Error('Failed to fetch todos for contact');\n//     }\n//     const todos = await response.json();\n//     return todos;\n//   }\n// );\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    listsByContact: {},\n    todos: {},\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    // Reducers if needed\n  },\n  extraReducers: builder => {\n    builder\n    // .addCase(fetchTodosForList.pending, (state) => {\n    //   state.status = 'loading';\n    // })\n    // .addCase(fetchTodosForList.fulfilled, (state, action) => {\n    //   state.status = 'succeeded';\n    //   // Assuming action.meta.arg is the list ID\n    //   state.todos[action.meta.arg] = action.payload;\n    // })\n    // .addCase(fetchTodosForList.rejected, (state, action) => {\n    //   state.status = 'failed';\n    //   state.error = action.error.message;\n    // })\n    // .addCase(fetchTodosForContact.fulfilled, (state, action) => {\n    //   state.todosByContact[action.meta.arg] = action.payload;\n    // })\n    .addCase(fetchListsForContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchListsForContact.rejected, (state, action) => {\n      var _action$payload;\n      state.status = 'failed';\n      // Update the state with the error message\n      // Make sure your state has a field to store this error message\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) || 'An unknown error occurred';\n    }).addCase(fetchListsForContact.fulfilled, (state, action) => {\n      console.log('Fulfilled action payload:', action.payload); // Log the action payload\n      const {\n        contactId,\n        lists\n      } = action.payload;\n      console.log(`Updating state for contact ID ${contactId} with lists:`, lists);\n      state.listsByContact[action.meta.arg] = action.payload.lists;\n      state.status = 'succeeded';\n    });\n  }\n});\nexport default listsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchListsForContact","contactId","rejectWithValue","response","fetch","console","log","ok","Error","data","json","error","message","listsSlice","name","initialState","listsByContact","todos","status","reducers","extraReducers","builder","addCase","pending","state","rejected","action","_action$payload","payload","fulfilled","lists","meta","arg","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n\nexport const fetchListsForContact = createAsyncThunk(\n  'lists/fetchListsForContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/lists-for-contact/${contactId}`);\n      console.log('Raw response:', response);\n      if (!response.ok) {\n        throw new Error('Failed to fetch lists');\n      }\n      const data = await response.json();\n      console.log('API response:', data);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n// export const fetchTodosForList = createAsyncThunk(\n//   'todos/fetchTodosForList',\n//   async (listId, thunkAPI) => {\n//     const response = await fetch(`/todos/${listId}`);\n//     if (!response.ok) {\n//       throw new Error('Failed to fetch todos');\n//     }\n//     const todos = await response.json();\n//     return todos;\n//   }\n// );\n\n// export const fetchTodosForContact = createAsyncThunk(\n//   'lists/fetchTodosForContact',\n//   async (contactId, thunkAPI) => {\n//     const response = await fetch(`/todos-for-contact/${contactId}`);\n//     if (!response.ok) {\n//       throw new Error('Failed to fetch todos for contact');\n//     }\n//     const todos = await response.json();\n//     return todos;\n//   }\n// );\n\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    listsByContact: {},\n    todos: {},\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n    // Reducers if needed\n  },\n  extraReducers: (builder) => {\n    builder\n      // .addCase(fetchTodosForList.pending, (state) => {\n      //   state.status = 'loading';\n      // })\n      // .addCase(fetchTodosForList.fulfilled, (state, action) => {\n      //   state.status = 'succeeded';\n      //   // Assuming action.meta.arg is the list ID\n      //   state.todos[action.meta.arg] = action.payload;\n      // })\n      // .addCase(fetchTodosForList.rejected, (state, action) => {\n      //   state.status = 'failed';\n      //   state.error = action.error.message;\n      // })\n      // .addCase(fetchTodosForContact.fulfilled, (state, action) => {\n      //   state.todosByContact[action.meta.arg] = action.payload;\n      // })\n      .addCase(fetchListsForContact.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchListsForContact.rejected, (state, action) => {\n        state.status = 'failed';\n        // Update the state with the error message\n        // Make sure your state has a field to store this error message\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchListsForContact.fulfilled, (state, action) => {\n        console.log('Fulfilled action payload:', action.payload); // Log the action payload\n        const { contactId, lists } = action.payload;\n        console.log(`Updating state for contact ID ${contactId} with lists:`, lists);\n        state.listsByContact[action.meta.arg] = action.payload.lists;\n        state.status = 'succeeded';\n      });\n  },\n});\n\nexport default listsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAGhE,OAAO,MAAMC,oBAAoB,GAAGD,gBAAgB,CAClD,4BAA4B,EAC5B,OAAOE,SAAS,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sBAAqBH,SAAU,EAAC,CAAC;IAC/DI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,QAAQ,CAAC;IACtC,IAAI,CAACA,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClCL,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,IAAI,CAAC;IAClC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOT,eAAe,CAACS,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,UAAU,GAAGf,WAAW,CAAC;EACpCgB,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,cAAc,EAAE,CAAC,CAAC;IAClBC,KAAK,EAAE,CAAC,CAAC;IACTC,MAAM,EAAE,MAAM;IACdP,KAAK,EAAE;EACT,CAAC;EACDQ,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,CACCC,OAAO,CAACtB,oBAAoB,CAACuB,OAAO,EAAGC,KAAK,IAAK;MAChDA,KAAK,CAACN,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDI,OAAO,CAACtB,oBAAoB,CAACyB,QAAQ,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAAA,IAAAC,eAAA;MACzDH,KAAK,CAACN,MAAM,GAAG,QAAQ;MACvB;MACA;MACAM,KAAK,CAACb,KAAK,GAAG,EAAAgB,eAAA,GAAAD,MAAM,CAACE,OAAO,cAAAD,eAAA,uBAAdA,eAAA,CAAgBf,OAAO,KAAI,2BAA2B;IACtE,CAAC,CAAC,CACDU,OAAO,CAACtB,oBAAoB,CAAC6B,SAAS,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC1DrB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEoB,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC;MAC1D,MAAM;QAAE3B,SAAS;QAAE6B;MAAM,CAAC,GAAGJ,MAAM,CAACE,OAAO;MAC3CvB,OAAO,CAACC,GAAG,CAAE,iCAAgCL,SAAU,cAAa,EAAE6B,KAAK,CAAC;MAC5EN,KAAK,CAACR,cAAc,CAACU,MAAM,CAACK,IAAI,CAACC,GAAG,CAAC,GAAGN,MAAM,CAACE,OAAO,CAACE,KAAK;MAC5DN,KAAK,CAACN,MAAM,GAAG,WAAW;IAC5B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeL,UAAU,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}