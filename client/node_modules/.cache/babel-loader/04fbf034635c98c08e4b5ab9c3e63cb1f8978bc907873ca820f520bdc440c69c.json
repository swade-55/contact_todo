{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  lists: [],\n  status: 'idle',\n  error: null\n};\n\n// Async thunk\nexport const addTodo = createAsyncThunk('todos/addTodo', async (todoData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/todos', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: todoData.title,\n        description: todoData.description,\n        completed: todoData.completed,\n        dueDate: todoData.due_date,\n        listId: todoData.list_id,\n        tags: todoData.tags\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add todo');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// export const addList = createAsyncThunk(\n//   'lists/addList',\n//   async (listData, { rejectWithValue }) => {\n//     try {\n//       const response = await fetch('/lists', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(listData),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to add list');\n//       }\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(addTodo.fulfilled, (state, action) => {\n      const listId = action.payload.list_id;\n      if (!state.todos[listId]) {\n        state.todos[listId] = [];\n      }\n      state.todos[listId].push(action.payload);\n    }).addCase(addList.pending, state => {\n      state.status = 'loading';\n    }).addCase(addList.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      console.log(action.payload);\n      // const { contact_id, ...listData } = action.payload;\n      // if (!state.listsByContact[contact_id]) {\n      //   state.listsByContact[contact_id] = [];\n      // }\n      // state.listsByContact[contact_id].push(listData);\n    }).addCase(addList.rejected, (state, action) => {\n      var _action$payload;\n      state.status = 'failed';\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) || 'An unknown error occurred';\n    });\n  }\n});\nexport default listsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","lists","status","error","addTodo","todoData","rejectWithValue","response","fetch","method","headers","body","JSON","stringify","title","description","completed","dueDate","due_date","listId","list_id","tags","ok","Error","data","json","message","listsSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","todos","push","addList","pending","console","log","rejected","_action$payload","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  lists: [],\n  status: 'idle',\n  error: null,\n};\n\n// Async thunk\nexport const addTodo = createAsyncThunk(\n  'todos/addTodo',\n  async (todoData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: todoData.title,\n          description: todoData.description,\n          completed: todoData.completed,\n          dueDate: todoData.due_date, \n          listId: todoData.list_id,   \n          tags: todoData.tags,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add todo');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n// export const addList = createAsyncThunk(\n//   'lists/addList',\n//   async (listData, { rejectWithValue }) => {\n//     try {\n//       const response = await fetch('/lists', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(listData),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to add list');\n//       }\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(addTodo.fulfilled, (state, action) => {\n        const listId = action.payload.list_id;\n        if (!state.todos[listId]) {\n          state.todos[listId] = [];\n        }\n        state.todos[listId].push(action.payload);\n      })\n      .addCase(addList.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(addList.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        console.log(action.payload)\n        // const { contact_id, ...listData } = action.payload;\n        // if (!state.listsByContact[contact_id]) {\n        //   state.listsByContact[contact_id] = [];\n        // }\n        // state.listsByContact[contact_id].push(listData);\n      })\n      .addCase(addList.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      });\n  },\n});\n\nexport default listsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}