{"ast":null,"code":"// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  companies: [],\n  status: 'idle',\n  // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async userId => {\n  console.log(`Fetching companies for user id: ${userId}`);\n  const response = await fetch(`/companies/${userId}`);\n  const data = await response.json();\n  if (!response.ok) {\n    console.error('Error fetching companies:', data.message);\n    throw new Error(data.message || 'Could not fetch companies');\n  }\n  console.log('Fetched companies:', data);\n  return data;\n});\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCompanies.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(fetchCompanies.fulfilled, (state, action) => {\n      console.log('Fetching companies: Succeeded', action.payload);\n      state.status = 'succeeded';\n      state.companies = action.payload;\n    }).addCase(fetchCompanies.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default companiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","companies","status","error","fetchCompanies","userId","console","log","response","fetch","data","json","ok","message","Error","companiesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/companiesSlice.js"],"sourcesContent":["// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  companies: [],\n  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async (userId) => {\n  console.log(`Fetching companies for user id: ${userId}`);\n  const response = await fetch(`/companies/${userId}`);\n  const data = await response.json();\n  if (!response.ok) {\n    console.error('Error fetching companies:', data.message);\n    throw new Error(data.message || 'Could not fetch companies');\n  }\n  console.log('Fetched companies:', data);\n  return data;\n});\n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompanies.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(fetchCompanies.fulfilled, (state, action) => {\n        console.log('Fetching companies: Succeeded', action.payload);\n        state.status = 'succeeded';\n        state.companies = action.payload;\n      })\n      .addCase(fetchCompanies.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default companiesSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,0BAA0B,EAAE,MAAOM,MAAM,IAAK;EAC3FC,OAAO,CAACC,GAAG,CAAE,mCAAkCF,MAAO,EAAC,CAAC;EACxD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaJ,MAAO,EAAC,CAAC;EACpD,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChBN,OAAO,CAACH,KAAK,CAAC,2BAA2B,EAAEO,IAAI,CAACG,OAAO,CAAC;IACxD,MAAM,IAAIC,KAAK,CAACJ,IAAI,CAACG,OAAO,IAAI,2BAA2B,CAAC;EAC9D;EACAP,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEG,IAAI,CAAC;EACvC,OAAOA,IAAI;AACb,CAAC,CAAC;AAEF,OAAO,MAAMK,cAAc,GAAGjB,WAAW,CAAC;EACxCkB,IAAI,EAAE,WAAW;EACjBhB,YAAY;EACZiB,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAChB,cAAc,CAACiB,OAAO,EAAGC,KAAK,IAAK;MAC1ChB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1Ce,KAAK,CAACpB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDkB,OAAO,CAAChB,cAAc,CAACmB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpDlB,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEiB,MAAM,CAACC,OAAO,CAAC;MAC5DH,KAAK,CAACpB,MAAM,GAAG,WAAW;MAC1BoB,KAAK,CAACrB,SAAS,GAAGuB,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CACDL,OAAO,CAAChB,cAAc,CAACsB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACnDlB,OAAO,CAACH,KAAK,CAAC,4BAA4B,EAAEqB,MAAM,CAACrB,KAAK,CAACU,OAAO,CAAC;MACjES,KAAK,CAACpB,MAAM,GAAG,QAAQ;MACvBoB,KAAK,CAACnB,KAAK,GAAGqB,MAAM,CAACrB,KAAK,CAACU,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeE,cAAc,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}