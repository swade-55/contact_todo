{"ast":null,"code":"// slices/tagsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const addTag = createAsyncThunk('tags/addTag', async (tagData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/tags', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(tagData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add tag');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchAllTags = createAsyncThunk('tags/fetchAllTags', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/tags');\n    if (!response.ok) {\n      throw new Error('Failed to fetch tags');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const tagsSlice = createSlice({\n  name: 'tags',\n  initialState: {\n    tags: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(addTag.fulfilled, (state, action) => {\n      // Add the new tag to the tags array\n      state.tags.push(action.payload);\n    }).addCase(addTag.rejected, (state, action) => {\n      var _action$payload;\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) || 'An unknown error occurred';\n    }).addCase(fetchAllTags.fulfilled, (state, action) => {\n      state.tags = action.payload;\n      state.contacts.push(action.payload);\n    });\n  }\n});\nexport default tagsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","addTag","tagData","rejectWithValue","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","message","fetchAllTags","_","tagsSlice","name","initialState","tags","status","reducers","extraReducers","builder","addCase","fulfilled","state","action","push","payload","rejected","_action$payload","contacts","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/tagsSlice.js"],"sourcesContent":["// slices/tagsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nexport const addTag = createAsyncThunk(\n  'tags/addTag',\n  async (tagData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/tags', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(tagData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add tag');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const fetchAllTags = createAsyncThunk(\n  'tags/fetchAllTags',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/tags');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tags');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n\nexport const tagsSlice = createSlice({\n  name: 'tags',\n  initialState: {\n    tags: [],\n    status: 'idle',\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(addTag.fulfilled, (state, action) => {\n        // Add the new tag to the tags array\n        state.tags.push(action.payload);\n      })\n      .addCase(addTag.rejected, (state, action) => {\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchAllTags.fulfilled, (state, action) => {\n        state.tags = action.payload;\n        state.contacts.push(action.payload)\n      });\n  },\n});\n\nexport default tagsSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,MAAM,GAAGD,gBAAgB,CACpC,aAAa,EACb,OAAOE,OAAO,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,OAAO,EAAE;MACpCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,OAAO;IAC9B,CAAC,CAAC;IACF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;IACtC;IACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOZ,eAAe,CAACY,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGjB,gBAAgB,CAC1C,mBAAmB,EACnB,OAAOkB,CAAC,EAAE;EAAEf;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,OAAO,CAAC;IACrC,IAAI,CAACD,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOZ,eAAe,CAACY,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAGD,OAAO,MAAMG,SAAS,GAAGpB,WAAW,CAAC;EACnCqB,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,IAAI,EAAE,EAAE;IACRC,MAAM,EAAE,MAAM;IACdR,KAAK,EAAE;EACT,CAAC;EACDS,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC1B,MAAM,CAAC2B,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5C;MACAD,KAAK,CAACP,IAAI,CAACS,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACjC,CAAC,CAAC,CACDL,OAAO,CAAC1B,MAAM,CAACgC,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAAA,IAAAI,eAAA;MAC3CL,KAAK,CAACd,KAAK,GAAG,EAAAmB,eAAA,GAAAJ,MAAM,CAACE,OAAO,cAAAE,eAAA,uBAAdA,eAAA,CAAgBlB,OAAO,KAAI,2BAA2B;IACtE,CAAC,CAAC,CACDW,OAAO,CAACV,YAAY,CAACW,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAClDD,KAAK,CAACP,IAAI,GAAGQ,MAAM,CAACE,OAAO;MAC3BH,KAAK,CAACM,QAAQ,CAACJ,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IACrC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeb,SAAS,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}