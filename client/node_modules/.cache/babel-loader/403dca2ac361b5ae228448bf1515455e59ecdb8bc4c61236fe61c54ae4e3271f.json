{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunk\nexport const fetchListsForContact = createAsyncThunk('lists/fetchListsForContact', async (contactId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/lists-for-contact/${contactId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch lists');\n    }\n    const data = await response.json();\n    // Directly return the data which should be an array\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchAllTodos = createAsyncThunk('todos/fetchAllTodos', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/todos');\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const addTodo = createAsyncThunk('todos/addTodo', async (todoData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/todos', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(todoData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add todo');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const addList = createAsyncThunk('lists/addList', async (listData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/lists', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(listData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add list');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    listsByContact: {},\n    todos: {},\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchListsForContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchListsForContact.rejected, (state, action) => {\n      var _action$payload;\n      state.status = 'failed';\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) || 'An unknown error occurred';\n    }).addCase(fetchListsForContact.fulfilled, (state, action) => {\n      // Log the action payload\n      console.log('Fulfilled action payload:', action.payload);\n      // Update state with the new array of lists for the contactId\n      state.listsByContact[action.meta.arg] = action.payload;\n      state.status = 'succeeded';\n    }).addCase(addTodo.fulfilled, (state, action) => {\n      const listId = action.payload.list_id;\n      if (!state.todos[listId]) {\n        state.todos[listId] = [];\n      }\n      state.todos[listId].push(action.payload);\n    }).addCase(fetchAllTodos.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllTodos.rejected, (state, action) => {\n      var _action$payload2;\n      state.status = 'failed';\n      state.error = ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.message) || 'An unknown error occurred';\n    }).addCase(fetchAllTodos.fulfilled, (state, action) => {\n      state.allTodos = action.payload;\n      state.status = 'succeeded';\n    }).addCase(addList.pending, state => {\n      state.status = 'loading';\n    }).addCase(addList.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Update the state with the newly added list\n      const {\n        contact_id,\n        ...listData\n      } = action.payload;\n      if (!state.listsByContact[contact_id]) {\n        state.listsByContact[contact_id] = [];\n      }\n      state.listsByContact[contact_id].push(listData);\n    }).addCase(addList.rejected, (state, action) => {\n      var _action$payload3;\n      state.status = 'failed';\n      state.error = ((_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.message) || 'An unknown error occurred';\n    });\n  }\n});\nexport default listsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchListsForContact","contactId","rejectWithValue","response","fetch","ok","Error","data","json","error","message","fetchAllTodos","_","addTodo","todoData","method","headers","body","JSON","stringify","addList","listData","listsSlice","name","initialState","listsByContact","todos","status","reducers","extraReducers","builder","addCase","pending","state","rejected","action","_action$payload","payload","fulfilled","console","log","meta","arg","listId","list_id","push","_action$payload2","allTodos","contact_id","_action$payload3","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunk\nexport const fetchListsForContact = createAsyncThunk(\n  'lists/fetchListsForContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/lists-for-contact/${contactId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch lists');\n      }\n      const data = await response.json();\n      // Directly return the data which should be an array\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const fetchAllTodos = createAsyncThunk(\n  'todos/fetchAllTodos',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/todos');\n      if (!response.ok) {\n        throw new Error('Failed to fetch todos');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addTodo = createAsyncThunk(\n  'todos/addTodo',\n  async (todoData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(todoData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add todo');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addList = createAsyncThunk(\n  'lists/addList',\n  async (listData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/lists', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(listData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add list');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    listsByContact: {},\n    todos: {},\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchListsForContact.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchListsForContact.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchListsForContact.fulfilled, (state, action) => {\n        // Log the action payload\n        console.log('Fulfilled action payload:', action.payload); \n        // Update state with the new array of lists for the contactId\n        state.listsByContact[action.meta.arg] = action.payload;\n        state.status = 'succeeded';\n      })\n      .addCase(addTodo.fulfilled, (state, action) => {\n        const listId = action.payload.list_id;\n        if (!state.todos[listId]) {\n          state.todos[listId] = [];\n        }\n        state.todos[listId].push(action.payload);\n      })\n      .addCase(fetchAllTodos.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllTodos.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchAllTodos.fulfilled, (state, action) => {\n        state.allTodos = action.payload;\n        state.status = 'succeeded';\n      })\n      .addCase(addList.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(addList.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Update the state with the newly added list\n        const { contact_id, ...listData } = action.payload;\n        if (!state.listsByContact[contact_id]) {\n          state.listsByContact[contact_id] = [];\n        }\n        state.listsByContact[contact_id].push(listData);\n      })\n      .addCase(addList.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      });\n  },\n});\n\nexport default listsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}