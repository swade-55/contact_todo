{"ast":null,"code":"// contactsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  contacts: [],\n  status: 'idle',\n  error: null\n};\n\n// Async thunk for fetching contacts\nexport const fetchContacts = createAsyncThunk('contacts/fetchContacts', async companyId => {\n  const response = await fetch(`/contacts/${companyId}`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch contacts');\n  }\n  return data;\n});\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: builder => {\n    // Use builder callback notation here\n    builder.addCase(fetchContacts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchContacts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.contacts = action.payload;\n    }).addCase(fetchContacts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default contactsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","contacts","status","error","fetchContacts","companyId","response","fetch","data","json","ok","Error","message","contactsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/contactsSlice.js"],"sourcesContent":["// contactsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  contacts: [],\n  status: 'idle',\n  error: null,\n};\n\n// Async thunk for fetching contacts\nexport const fetchContacts = createAsyncThunk('contacts/fetchContacts', async (companyId) => {\n  const response = await fetch(`/contacts/${companyId}`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch contacts');\n  }\n  return data;\n});\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: (builder) => { // Use builder callback notation here\n    builder\n      .addCase(fetchContacts.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchContacts.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.contacts = action.payload;\n      })\n      .addCase(fetchContacts.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default contactsSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGL,gBAAgB,CAAC,wBAAwB,EAAE,MAAOM,SAAS,IAAK;EAC3F,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,aAAYF,SAAU,EAAC,CAAC;EACtD,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,0BAA0B,CAAC;EAC7D;EACA,OAAOJ,IAAI;AACb,CAAC,CAAC;AAEF,OAAO,MAAMK,aAAa,GAAGf,WAAW,CAAC;EACvCgB,IAAI,EAAE,UAAU;EAChBd,YAAY;EACZe,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAAE;IAC5BA,OAAO,CACJC,OAAO,CAACd,aAAa,CAACe,OAAO,EAAGC,KAAK,IAAK;MACzCA,KAAK,CAAClB,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDgB,OAAO,CAACd,aAAa,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAAClB,MAAM,GAAG,WAAW;MAC1BkB,KAAK,CAACnB,QAAQ,GAAGqB,MAAM,CAACC,OAAO;IACjC,CAAC,CAAC,CACDL,OAAO,CAACd,aAAa,CAACoB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAAClB,MAAM,GAAG,QAAQ;MACvBkB,KAAK,CAACjB,KAAK,GAAGmB,MAAM,CAACnB,KAAK,CAACS,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeC,aAAa,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}