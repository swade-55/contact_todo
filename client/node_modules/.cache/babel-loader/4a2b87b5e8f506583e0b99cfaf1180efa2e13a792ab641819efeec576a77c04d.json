{"ast":null,"code":"// contactsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  contacts: [],\n  status: 'idle',\n  error: null\n};\nexport const addContact = createAsyncThunk('contacts/addContact', async (contactData, {\n  rejectWithValue\n}) => {\n  try {\n    a;\n    const response = await fetch('/contacts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(contactData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchContacts = createAsyncThunk('contacts/fetchContacts', async companyId => {\n  const url = `/company-contacts-lists/${companyId}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    const errorData = await response.text();\n    throw new Error(errorData || 'Could not fetch contacts');\n  }\n  const data = await response.json();\n  return data;\n});\nexport const fetchAllContacts = createAsyncThunk('contacts/fetchAllContacts', async () => {\n  const response = await fetch('/contacts-lists');\n  if (!response.ok) {\n    throw new Error('Could not fetch contacts');\n  }\n  return await response.json();\n});\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchContacts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchContacts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.contacts = action.payload;\n    }).addCase(fetchContacts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchAllContacts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllContacts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Set the contacts to the fetched data\n      state.contacts = action.payload;\n    }).addCase(fetchAllContacts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(addContact.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.contacts.push(action.payload);\n    }).addCase(addContact.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default contactsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","contacts","status","error","addContact","contactData","rejectWithValue","a","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","message","fetchContacts","companyId","url","errorData","text","data","fetchAllContacts","contactsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","push","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/contactsSlice.js"],"sourcesContent":["// contactsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  contacts: [],\n  status: 'idle',\n  error: null,\n};\n\nexport const addContact = createAsyncThunk('contacts/addContact',async(contactData,{rejectWithValue})=>{\n  try{a\n    const response = await fetch('/contacts',{\n      method:'POST',\n      headers:{\n        'Content-Type':'application/json',\n      },\n      body:JSON.stringify(contactData)\n    });\n    if (!response.ok){\n      throw new Error('Network response was not ok')\n    }\n    return response.json();\n  } catch (error){\n    return rejectWithValue(error.message)\n  }\n});\n\nexport const fetchContacts = createAsyncThunk('contacts/fetchContacts', async (companyId) => {\n  const url = `/company-contacts-lists/${companyId}`; \n  const response = await fetch(url);\n  \n  if (!response.ok) {\n    const errorData = await response.text();\n    throw new Error(errorData || 'Could not fetch contacts');\n  }\n  \n  const data = await response.json();\n  return data;\n});\n\nexport const fetchAllContacts = createAsyncThunk('contacts/fetchAllContacts', async () => {\n  const response = await fetch('/contacts-lists');\n  if (!response.ok) {\n    throw new Error('Could not fetch contacts');\n  }\n  return await response.json();\n});\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchContacts.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchContacts.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.contacts = action.payload;\n      })\n      .addCase(fetchContacts.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(fetchAllContacts.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllContacts.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Set the contacts to the fetched data\n        state.contacts = action.payload;\n      })\n      .addCase(fetchAllContacts.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addContact.pending,(state)=>{\n        state.status='loading';\n      })\n      .addCase(addContact.fulfilled,(state,action)=>{\n        state.status='succeeded';\n        state.contacts.push(action.payload)\n      })\n      .addCase(addContact.rejected,(state,action)=>{\n        state.status='failed';\n        state.error=action.error.message;\n      })\n  },\n});\n\nexport default contactsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}