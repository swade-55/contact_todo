{"ast":null,"code":"var _jsxFileName = \"/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/ManageContacts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTable } from 'react-table';\nimport { fetchContacts } from './slices/contactsSlice';\nimport { fetchCompanies } from './slices/companiesSlice';\nimport '../styles/ManageContacts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageContacts = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [selectedCompanyId, setSelectedCompanyId] = useState('');\n\n  // Retrieve companies and contacts from Redux store\n  const companies = useSelector(state => state.companies.companies);\n  const contacts = useSelector(state => state.contacts.contacts);\n  useEffect(() => {\n    dispatch(fetchCompanies());\n  }, [dispatch]);\n  useEffect(() => {\n    if (selectedCompanyId) {\n      dispatch(fetchContacts(selectedCompanyId));\n    }\n  }, [selectedCompanyId, dispatch]);\n\n  // Define columns for react-table\n  const columns = React.useMemo(() => [{\n    Header: 'ID',\n    accessor: 'id' // accessor is the \"key\" in the data\n  }, {\n    Header: 'Name',\n    accessor: 'name'\n  }, {\n    Header: 'Last Contact Date',\n    accessor: 'last_contact_date'\n  }, {\n    Header: 'Current Status',\n    accessor: 'status'\n  }\n  // Add more columns as needed\n  ], []);\n  const instance = useTable({\n    columns,\n    data: contacts\n  });\n  const handleCompanyChange = event => {\n    setSelectedCompanyId(event.target.value);\n  };\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data: contacts\n  });\n\n  // Render the table UI using react-table's UI construction methods\n  // Render the dropdown and table UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ManageContacts-container\",\n    children: /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedCompanyId,\n      onChange: handleCompanyChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a Company\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), companies.map(company => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: company.id,\n        children: company.name\n      }, company.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageContacts, \"dfHytp/pXpLElYe0UMmInVeCBew=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useTable, useTable];\n});\n_c = ManageContacts;\nexport default ManageContacts;\nvar _c;\n$RefreshReg$(_c, \"ManageContacts\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","useTable","fetchContacts","fetchCompanies","jsxDEV","_jsxDEV","ManageContacts","_s","dispatch","selectedCompanyId","setSelectedCompanyId","companies","state","contacts","columns","useMemo","Header","accessor","instance","data","handleCompanyChange","event","target","value","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","company","id","name","_c","$RefreshReg$"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/ManageContacts.js"],"sourcesContent":["import React, {useState,useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTable } from 'react-table'; \nimport {fetchContacts} from './slices/contactsSlice'\nimport {fetchCompanies} from './slices/companiesSlice'\nimport '../styles/ManageContacts.css';\n\nconst ManageContacts = () => {\n    const dispatch = useDispatch();\n    const [selectedCompanyId,setSelectedCompanyId] = useState('')\n\n  // Retrieve companies and contacts from Redux store\n  const companies = useSelector(state=>state.companies.companies)\n  const contacts = useSelector((state) => state.contacts.contacts);\n\n  useEffect(()=>{\n    dispatch(fetchCompanies())\n  },[dispatch])\n\n  useEffect(()=>{\n    if (selectedCompanyId){\n        dispatch(fetchContacts(selectedCompanyId))\n    }\n  },[selectedCompanyId,dispatch])\n\n\n  // Define columns for react-table\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'ID',\n        accessor: 'id', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Name',\n        accessor: 'name',\n      },\n      {\n        Header:'Last Contact Date',\n        accessor: 'last_contact_date'\n      },\n      {\n        Header:'Current Status',\n        accessor:'status'\n      },\n      // Add more columns as needed\n    ],\n    []\n  );\n\n  const instance = useTable({columns,data:contacts})\n\n  const handleCompanyChange = (event)=>{\n    setSelectedCompanyId(event.target.value)\n  }\n\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({ columns, data: contacts });\n\n  // Render the table UI using react-table's UI construction methods\n   // Render the dropdown and table UI\n  return (\n    <div className=\"ManageContacts-container\">\n      {/* Dropdown for selecting company */}\n      <select value={selectedCompanyId} onChange={handleCompanyChange}>\n        <option value=\"\">Select a Company</option>\n        {companies.map((company) => (\n          <option key={company.id} value={company.id}>\n            {company.name}\n          </option>\n        ))}\n      </select>\n\n      {/* Table for displaying contacts */}\n      {/* ... table rendering code */}\n    </div>\n  );\n};\n\nexport default ManageContacts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}