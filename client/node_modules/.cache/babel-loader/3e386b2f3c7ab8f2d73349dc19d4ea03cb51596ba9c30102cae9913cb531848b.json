{"ast":null,"code":"// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  companies: [],\n  status: 'idle',\n  // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async userId => {\n  const response = await fetch(`/companies/${userId}`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch companies');\n  }\n  return data;\n});\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: {\n    [fetchCompanies.pending]: state => {\n      state.status = 'loading';\n    },\n    [fetchCompanies.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.companies = action.payload;\n    },\n    [fetchCompanies.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }\n  }\n});\nexport default companiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","companies","status","error","fetchCompanies","userId","response","fetch","data","json","ok","Error","message","companiesSlice","name","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/companiesSlice.js"],"sourcesContent":["// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  companies: [],\n  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async (userId) => {\n  const response = await fetch(`/companies/${userId}`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch companies');\n  }\n  return data;\n});\n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: {\n    [fetchCompanies.pending]: (state) => {\n      state.status = 'loading';\n    },\n    [fetchCompanies.fulfilled]: (state, action) => {\n      state.status = 'succeeded';\n      state.companies = action.payload;\n    },\n    [fetchCompanies.rejected]: (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default companiesSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,0BAA0B,EAAE,MAAOM,MAAM,IAAK;EAC3F,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaF,MAAO,EAAC,CAAC;EACpD,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,2BAA2B,CAAC;EAC9D;EACA,OAAOJ,IAAI;AACb,CAAC,CAAC;AAEF,OAAO,MAAMK,cAAc,GAAGf,WAAW,CAAC;EACxCgB,IAAI,EAAE,WAAW;EACjBd,YAAY;EACZe,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAE;IACb,CAACZ,cAAc,CAACa,OAAO,GAAIC,KAAK,IAAK;MACnCA,KAAK,CAAChB,MAAM,GAAG,SAAS;IAC1B,CAAC;IACD,CAACE,cAAc,CAACe,SAAS,GAAG,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC7CF,KAAK,CAAChB,MAAM,GAAG,WAAW;MAC1BgB,KAAK,CAACjB,SAAS,GAAGmB,MAAM,CAACC,OAAO;IAClC,CAAC;IACD,CAACjB,cAAc,CAACkB,QAAQ,GAAG,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC5CF,KAAK,CAAChB,MAAM,GAAG,QAAQ;MACvBgB,KAAK,CAACf,KAAK,GAAGiB,MAAM,CAACjB,KAAK,CAACS,OAAO;IACpC;EACF;AACF,CAAC,CAAC;AAEF,eAAeC,cAAc,CAACU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}