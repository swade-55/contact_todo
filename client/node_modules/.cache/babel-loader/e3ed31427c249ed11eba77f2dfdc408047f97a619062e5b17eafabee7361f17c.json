{"ast":null,"code":"// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  companies: [],\n  status: 'idle',\n  // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async userId => {\n  const url = `http://localhost:5000/companies/${userId}`; // Full URL to your Flask API\n  console.log(`Fetching companies for user id: ${userId} from ${url}`);\n  const response = await fetch(url);\n  if (!response.ok) {\n    // This will handle any non-200 HTTP status codes\n    console.error(`HTTP error! status: ${response.status}`);\n    throw new Error('Could not fetch companies');\n  }\n  const data = await response.json();\n  console.log('Fetched companies:', data);\n  return data;\n});\nexport const addCompany = createAsyncThunk('companies/addCompany', async (companyData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('http://localhost:5000/companies', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCompanies.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(fetchCompanies.fulfilled, (state, action) => {\n      console.log('Fetching companies: Succeeded', action.payload);\n      state.status = 'succeeded';\n      state.companies = action.payload;\n    }).addCase(fetchCompanies.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default companiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","companies","status","error","fetchCompanies","userId","url","console","log","response","fetch","ok","Error","data","json","addCompany","companyData","rejectWithValue","method","headers","body","JSON","stringify","message","companiesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/companiesSlice.js"],"sourcesContent":["// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  companies: [],\n  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'\n  error: null,\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async (userId) => {\n    const url = `http://localhost:5000/companies/${userId}`; // Full URL to your Flask API\n    console.log(`Fetching companies for user id: ${userId} from ${url}`);\n    const response = await fetch(url);\n  \n    if (!response.ok) {\n      // This will handle any non-200 HTTP status codes\n      console.error(`HTTP error! status: ${response.status}`);\n      throw new Error('Could not fetch companies');\n    }\n  \n    const data = await response.json();\n    console.log('Fetched companies:', data);\n    return data;\n  });\n\n  export const addCompany = createAsyncThunk('companies/addCompany', async (companyData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('http://localhost:5000/companies', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  \n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompanies.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(fetchCompanies.fulfilled, (state, action) => {\n        console.log('Fetching companies: Succeeded', action.payload);\n        state.status = 'succeeded';\n        state.companies = action.payload;\n      })\n      .addCase(fetchCompanies.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default companiesSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,MAAM;EAAE;EAChBC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,0BAA0B,EAAE,MAAOM,MAAM,IAAK;EACzF,MAAMC,GAAG,GAAI,mCAAkCD,MAAO,EAAC,CAAC,CAAC;EACzDE,OAAO,CAACC,GAAG,CAAE,mCAAkCH,MAAO,SAAQC,GAAI,EAAC,CAAC;EACpE,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,CAAC;EAEjC,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;IAChB;IACAJ,OAAO,CAACJ,KAAK,CAAE,uBAAsBM,QAAQ,CAACP,MAAO,EAAC,CAAC;IACvD,MAAM,IAAIU,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAClCP,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEK,IAAI,CAAC;EACvC,OAAOA,IAAI;AACb,CAAC,CAAC;AAEF,OAAO,MAAME,UAAU,GAAGhB,gBAAgB,CAAC,sBAAsB,EAAE,OAAOiB,WAAW,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC7G,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;MAC9DQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,WAAW;IAClC,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,OAAOH,QAAQ,CAACK,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOX,KAAK,EAAE;IACd,OAAOc,eAAe,CAACd,KAAK,CAACoB,OAAO,CAAC;EACvC;AACF,CAAC,CAAC;AAGJ,OAAO,MAAMC,cAAc,GAAG1B,WAAW,CAAC;EACxC2B,IAAI,EAAE,WAAW;EACjBzB,YAAY;EACZ0B,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACzB,cAAc,CAAC0B,OAAO,EAAGC,KAAK,IAAK;MAC1CxB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1CuB,KAAK,CAAC7B,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACD2B,OAAO,CAACzB,cAAc,CAAC4B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpD1B,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEyB,MAAM,CAACC,OAAO,CAAC;MAC5DH,KAAK,CAAC7B,MAAM,GAAG,WAAW;MAC1B6B,KAAK,CAAC9B,SAAS,GAAGgC,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CACDL,OAAO,CAACzB,cAAc,CAAC+B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACnD1B,OAAO,CAACJ,KAAK,CAAC,4BAA4B,EAAE8B,MAAM,CAAC9B,KAAK,CAACoB,OAAO,CAAC;MACjEQ,KAAK,CAAC7B,MAAM,GAAG,QAAQ;MACvB6B,KAAK,CAAC5B,KAAK,GAAG8B,MAAM,CAAC9B,KAAK,CAACoB,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeC,cAAc,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}