{"ast":null,"code":"// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  companies: [],\n  status: 'idle',\n  error: null\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async userId => {\n  if (userId === undefined) {\n    userId = '1';\n  }\n  const url = `http://localhost:5000/companies/${userId}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    console.error(`HTTP error! status: ${response.status}`);\n    throw new Error('Could not fetch companies');\n  }\n  const data = await response.json();\n  return data;\n});\nexport const addCompany = createAsyncThunk('companies/addCompany', async (companyData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('http://localhost:5000/companies', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const updateCompany = createAsyncThunk('companies/updateCompany', async (companyData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`http://localhost:5000/companies/${companyData.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCompanies.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(fetchCompanies.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.companies = action.payload;\n    }).addCase(fetchCompanies.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addCompany.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(addCompany.fulfilled, (state, action) => {\n      //update state with the new company in the end\n      state.status = 'succeeded';\n      state.companies = action.payload;\n      //action.payload might be one company\n      //include the added company to the end of the companies array\n      console.log(action.payload);\n    }).addCase(addCompany.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default companiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","companies","status","error","fetchCompanies","userId","undefined","url","response","fetch","ok","console","Error","data","json","addCompany","companyData","rejectWithValue","method","headers","body","JSON","stringify","message","updateCompany","id","companiesSlice","name","reducers","extraReducers","builder","addCase","pending","state","log","fulfilled","action","payload","rejected","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/companiesSlice.js"],"sourcesContent":["// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  companies: [],\n  status: 'idle', \n  error: null,\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async (userId) => {\n\n  if (userId === undefined) {\n    userId = '1'; \n}\n    const url = `http://localhost:5000/companies/${userId}`; \n    const response = await fetch(url);\n  \n    if (!response.ok) {\n      console.error(`HTTP error! status: ${response.status}`);\n      throw new Error('Could not fetch companies');\n    }\n  \n    const data = await response.json();\n    return data;\n  });\n\n  export const addCompany = createAsyncThunk('companies/addCompany', async (companyData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('http://localhost:5000/companies', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  \n  export const updateCompany = createAsyncThunk('companies/updateCompany', async (companyData, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`http://localhost:5000/companies/${companyData.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    // Reducers for any synchronous actions\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompanies.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(fetchCompanies.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.companies = action.payload;\n      })\n      .addCase(fetchCompanies.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addCompany.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(addCompany.fulfilled, (state, action) => {\n        //update state with the new company in the end\n        state.status = 'succeeded';\n        state.companies = action.payload;\n        //action.payload might be one company\n        //include the added company to the end of the companies array\n        console.log(action.payload)\n      })\n      .addCase(addCompany.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default companiesSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}