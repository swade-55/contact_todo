{"ast":null,"code":"// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  companies: [],\n  status: 'idle',\n  error: null\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async userId => {\n  const url = `/companies/${userId}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    console.error(`HTTP error! status: ${response.status}`);\n    throw new Error('Could not fetch companies');\n  }\n  const data = await response.json();\n  return data;\n});\nexport const addCompany = createAsyncThunk('companies/addCompany', async (formData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/companies', {\n      method: 'POST',\n      body: formData // Directly passing FormData object\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return await response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const deleteCompany = createAsyncThunk('companies/deleteCompany', async (companyId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/companies/${companyId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return companyId; // Return the ID of the deleted company\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const updateCompany = createAsyncThunk('companies/updateCompany', async (companyData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/companies/${id}`, {\n      method: 'PATCH',\n      body: formData // formData is a FormData object containing the file and other data\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCompanies.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(fetchCompanies.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.companies = action.payload;\n    }).addCase(fetchCompanies.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addCompany.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(addCompany.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Append the new company to the existing array instead of replacing it\n      state.companies.push(action.payload);\n    }).addCase(addCompany.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(deleteCompany.fulfilled, (state, action) => {\n      state.companies = state.companies.filter(company => company.id !== action.payload);\n    }).addCase(updateCompany.fulfilled, (state, action) => {\n      const index = state.companies.findIndex(company => company.id === action.payload.id);\n      if (index !== -1) {\n        // Update the company in the array\n        state.companies[index] = action.payload;\n      } else {\n        console.warn(\"Updated company not found in the array\");\n      }\n    }).addCase(updateCompany.rejected, (state, action) => {\n      console.error('Updating company failed', action.error.message);\n      state.error = action.error.message;\n    });\n  }\n});\nexport default companiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","companies","status","error","fetchCompanies","userId","url","response","fetch","ok","console","Error","data","json","addCompany","formData","rejectWithValue","method","body","message","deleteCompany","companyId","updateCompany","companyData","id","companiesSlice","name","reducers","extraReducers","builder","addCase","pending","state","log","fulfilled","action","payload","rejected","push","filter","company","index","findIndex","warn","reducer"],"sources":["/home/samuelrcwade/Development/Code/Projects/contact_todo/client/src/components/slices/companiesSlice.js"],"sourcesContent":["// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  companies: [],\n  status: 'idle', \n  error: null,\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async (userId) => {\n    const url = `/companies/${userId}`; \n    const response = await fetch(url);\n  \n    if (!response.ok) {\n      console.error(`HTTP error! status: ${response.status}`);\n      throw new Error('Could not fetch companies');\n    }\n  \n    const data = await response.json();\n    return data;\n  });\n\n  export const addCompany = createAsyncThunk('companies/addCompany', async (formData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/companies', {\n        method: 'POST',\n        body: formData, // Directly passing FormData object\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return await response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  \n\n  export const deleteCompany = createAsyncThunk('companies/deleteCompany', async (companyId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/companies/${companyId}`, {\n        method: 'DELETE',\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return companyId;  // Return the ID of the deleted company\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  \n  \n  export const updateCompany = createAsyncThunk('companies/updateCompany', async (companyData, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/companies/${id}`, {\n        method: 'PATCH',\n        body: formData, // formData is a FormData object containing the file and other data\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    \n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompanies.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(fetchCompanies.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.companies = action.payload;\n      })\n      .addCase(fetchCompanies.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addCompany.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(addCompany.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Append the new company to the existing array instead of replacing it\n        state.companies.push(action.payload);\n      })\n      .addCase(addCompany.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(deleteCompany.fulfilled, (state, action) => {\n        state.companies = state.companies.filter(company => company.id !== action.payload);\n      })\n      .addCase(updateCompany.fulfilled, (state, action) => {\n        const index = state.companies.findIndex(company => company.id === action.payload.id);\n        if (index !== -1) {\n          // Update the company in the array\n          state.companies[index] = action.payload;\n        } else {\n          console.warn(\"Updated company not found in the array\");\n        }\n      })\n      .addCase(updateCompany.rejected, (state, action) => {\n        console.error('Updating company failed', action.error.message);\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default companiesSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,EAAE;EACbC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGL,gBAAgB,CAAC,0BAA0B,EAAE,MAAOM,MAAM,IAAK;EACzF,MAAMC,GAAG,GAAI,cAAaD,MAAO,EAAC;EAClC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EAEjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChBC,OAAO,CAACP,KAAK,CAAE,uBAAsBI,QAAQ,CAACL,MAAO,EAAC,CAAC;IACvD,MAAM,IAAIS,KAAK,CAAC,2BAA2B,CAAC;EAC9C;EAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI;AACb,CAAC,CAAC;AAEF,OAAO,MAAME,UAAU,GAAGf,gBAAgB,CAAC,sBAAsB,EAAE,OAAOgB,QAAQ,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC1G,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MACzCS,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEH,QAAQ,CAAE;IAClB,CAAC,CAAC;IAEF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,OAAO,MAAMJ,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOV,KAAK,EAAE;IACd,OAAOa,eAAe,CAACb,KAAK,CAACgB,OAAO,CAAC;EACvC;AACF,CAAC,CAAC;AAGF,OAAO,MAAMC,aAAa,GAAGrB,gBAAgB,CAAC,yBAAyB,EAAE,OAAOsB,SAAS,EAAE;EAAEL;AAAgB,CAAC,KAAK;EACjH,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAaa,SAAU,EAAC,EAAE;MACtDJ,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,OAAOU,SAAS,CAAC,CAAE;EACrB,CAAC,CAAC,OAAOlB,KAAK,EAAE;IACd,OAAOa,eAAe,CAACb,KAAK,CAACgB,OAAO,CAAC;EACvC;AACF,CAAC,CAAC;AAGF,OAAO,MAAMG,aAAa,GAAGvB,gBAAgB,CAAC,yBAAyB,EAAE,OAAOwB,WAAW,EAAE;EAAEP;AAAgB,CAAC,KAAK;EACnH,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,cAAagB,EAAG,EAAC,EAAE;MAC/CP,MAAM,EAAE,OAAO;MACfC,IAAI,EAAEH,QAAQ,CAAE;IAClB,CAAC,CAAC;IAEF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,OAAOJ,QAAQ,CAACM,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOV,KAAK,EAAE;IACd,OAAOa,eAAe,CAACb,KAAK,CAACgB,OAAO,CAAC;EACvC;AACF,CAAC,CAAC;AAEJ,OAAO,MAAMM,cAAc,GAAG3B,WAAW,CAAC;EACxC4B,IAAI,EAAE,WAAW;EACjB1B,YAAY;EACZ2B,QAAQ,EAAE,CAEV,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC1B,cAAc,CAAC2B,OAAO,EAAGC,KAAK,IAAK;MAC1CtB,OAAO,CAACuB,GAAG,CAAC,6BAA6B,CAAC;MAC1CD,KAAK,CAAC9B,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACD4B,OAAO,CAAC1B,cAAc,CAAC8B,SAAS,EAAE,CAACF,KAAK,EAAEG,MAAM,KAAK;MACpDH,KAAK,CAAC9B,MAAM,GAAG,WAAW;MAC1B8B,KAAK,CAAC/B,SAAS,GAAGkC,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CACDN,OAAO,CAAC1B,cAAc,CAACiC,QAAQ,EAAE,CAACL,KAAK,EAAEG,MAAM,KAAK;MACnDzB,OAAO,CAACP,KAAK,CAAC,4BAA4B,EAAEgC,MAAM,CAAChC,KAAK,CAACgB,OAAO,CAAC;MACjEa,KAAK,CAAC9B,MAAM,GAAG,QAAQ;MACvB8B,KAAK,CAAC7B,KAAK,GAAGgC,MAAM,CAAChC,KAAK,CAACgB,OAAO;IACpC,CAAC,CAAC,CACDW,OAAO,CAAChB,UAAU,CAACiB,OAAO,EAAGC,KAAK,IAAK;MACtCtB,OAAO,CAACuB,GAAG,CAAC,6BAA6B,CAAC;MAC1CD,KAAK,CAAC9B,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACD4B,OAAO,CAAChB,UAAU,CAACoB,SAAS,EAAE,CAACF,KAAK,EAAEG,MAAM,KAAK;MAChDH,KAAK,CAAC9B,MAAM,GAAG,WAAW;MAC1B;MACA8B,KAAK,CAAC/B,SAAS,CAACqC,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IACtC,CAAC,CAAC,CACDN,OAAO,CAAChB,UAAU,CAACuB,QAAQ,EAAE,CAACL,KAAK,EAAEG,MAAM,KAAK;MAC/CzB,OAAO,CAACP,KAAK,CAAC,4BAA4B,EAAEgC,MAAM,CAAChC,KAAK,CAACgB,OAAO,CAAC;MACjEa,KAAK,CAAC9B,MAAM,GAAG,QAAQ;MACvB8B,KAAK,CAAC7B,KAAK,GAAGgC,MAAM,CAAChC,KAAK,CAACgB,OAAO;IACpC,CAAC,CAAC,CACDW,OAAO,CAACV,aAAa,CAACc,SAAS,EAAE,CAACF,KAAK,EAAEG,MAAM,KAAK;MACnDH,KAAK,CAAC/B,SAAS,GAAG+B,KAAK,CAAC/B,SAAS,CAACsC,MAAM,CAACC,OAAO,IAAIA,OAAO,CAAChB,EAAE,KAAKW,MAAM,CAACC,OAAO,CAAC;IACpF,CAAC,CAAC,CACDN,OAAO,CAACR,aAAa,CAACY,SAAS,EAAE,CAACF,KAAK,EAAEG,MAAM,KAAK;MACnD,MAAMM,KAAK,GAAGT,KAAK,CAAC/B,SAAS,CAACyC,SAAS,CAACF,OAAO,IAAIA,OAAO,CAAChB,EAAE,KAAKW,MAAM,CAACC,OAAO,CAACZ,EAAE,CAAC;MACpF,IAAIiB,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB;QACAT,KAAK,CAAC/B,SAAS,CAACwC,KAAK,CAAC,GAAGN,MAAM,CAACC,OAAO;MACzC,CAAC,MAAM;QACL1B,OAAO,CAACiC,IAAI,CAAC,wCAAwC,CAAC;MACxD;IACF,CAAC,CAAC,CACDb,OAAO,CAACR,aAAa,CAACe,QAAQ,EAAE,CAACL,KAAK,EAAEG,MAAM,KAAK;MAClDzB,OAAO,CAACP,KAAK,CAAC,yBAAyB,EAAEgC,MAAM,CAAChC,KAAK,CAACgB,OAAO,CAAC;MAC9Da,KAAK,CAAC7B,KAAK,GAAGgC,MAAM,CAAChC,KAAK,CAACgB,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeM,cAAc,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}