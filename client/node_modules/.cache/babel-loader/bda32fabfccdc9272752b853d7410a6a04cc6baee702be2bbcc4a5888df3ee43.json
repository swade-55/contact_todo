{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const fetchListsForContact = createAsyncThunk('lists/fetchListsForContact', async (contactId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/lists-for-contact/${contactId}`);\n\n    // Ensure the response is of type 'application/json'\n    const contentType = response.headers.get('content-type');\n    if (!response.ok || !contentType.includes('application/json')) {\n      // If the response is not OK or not JSON, get the response as text to capture any server-rendered error page text\n      const errorText = await response.text();\n      throw new Error(errorText || `Request failed with status ${response.status}`);\n    }\n    const lists = await response.json();\n    return {\n      contactId,\n      lists\n    };\n  } catch (error) {\n    return rejectWithValue({\n      message: error.message || 'Failed to fetch lists',\n      contactId: contactId\n    });\n  }\n});\nexport const fetchTodosForList = createAsyncThunk('todos/fetchTodosForList', async (listId, thunkAPI) => {\n  const response = await fetch(`/todos/${listId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch todos');\n  }\n  const todos = await response.json();\n  return todos;\n});\nexport const fetchTodosForContact = createAsyncThunk('lists/fetchTodosForContact', async (contactId, thunkAPI) => {\n  const response = await fetch(`/todos-for-contact/${contactId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch todos for contact');\n  }\n  const todos = await response.json();\n  return todos;\n});\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    listsByContact: {},\n    todos: {},\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    // Reducers if needed\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodosForList.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchTodosForList.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Assuming action.meta.arg is the list ID\n      state.todos[action.meta.arg] = action.payload;\n    }).addCase(fetchTodosForList.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchTodosForContact.fulfilled, (state, action) => {\n      state.todosByContact[action.meta.arg] = action.payload;\n    }).addCase(fetchListsForContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchListsForContact.rejected, (state, action) => {\n      var _action$payload;\n      state.status = 'failed';\n      // Update the state with the error message\n      // Make sure your state has a field to store this error message\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) || 'An unknown error occurred';\n    }).addCase(fetchListsForContact.fulfilled, (state, action) => {\n      const {\n        contactId,\n        lists\n      } = action.payload;\n      state.listsByContact[contactId] = lists;\n      state.status = 'succeeded';\n    });\n  }\n});\nexport default listsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchListsForContact","contactId","rejectWithValue","response","fetch","contentType","headers","get","ok","includes","errorText","text","Error","status","lists","json","error","message","fetchTodosForList","listId","thunkAPI","todos","fetchTodosForContact","listsSlice","name","initialState","listsByContact","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","meta","arg","payload","rejected","todosByContact","_action$payload","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n\nexport const fetchListsForContact = createAsyncThunk(\n  'lists/fetchListsForContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/lists-for-contact/${contactId}`);\n\n      // Ensure the response is of type 'application/json'\n      const contentType = response.headers.get('content-type');\n      if (!response.ok || !contentType.includes('application/json')) {\n        // If the response is not OK or not JSON, get the response as text to capture any server-rendered error page text\n        const errorText = await response.text();\n        throw new Error(errorText || `Request failed with status ${response.status}`);\n      }\n\n      const lists = await response.json();\n      return { contactId, lists };\n    } catch (error) {\n      return rejectWithValue({\n        message: error.message || 'Failed to fetch lists',\n        contactId: contactId\n      });\n    }\n  }\n);\n\n\n\nexport const fetchTodosForList = createAsyncThunk(\n  'todos/fetchTodosForList',\n  async (listId, thunkAPI) => {\n    const response = await fetch(`/todos/${listId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos');\n    }\n    const todos = await response.json();\n    return todos;\n  }\n);\n\nexport const fetchTodosForContact = createAsyncThunk(\n  'lists/fetchTodosForContact',\n  async (contactId, thunkAPI) => {\n    const response = await fetch(`/todos-for-contact/${contactId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos for contact');\n    }\n    const todos = await response.json();\n    return todos;\n  }\n);\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    listsByContact: {},\n    todos: {},\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n    // Reducers if needed\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTodosForList.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchTodosForList.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Assuming action.meta.arg is the list ID\n        state.todos[action.meta.arg] = action.payload;\n      })\n      .addCase(fetchTodosForList.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(fetchTodosForContact.fulfilled, (state, action) => {\n        state.todosByContact[action.meta.arg] = action.payload;\n      })\n      .addCase(fetchListsForContact.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchListsForContact.rejected, (state, action) => {\n        state.status = 'failed';\n        // Update the state with the error message\n        // Make sure your state has a field to store this error message\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchListsForContact.fulfilled, (state, action) => {\n        const { contactId, lists } = action.payload;\n        state.listsByContact[contactId] = lists;\n        state.status = 'succeeded';\n      });\n  },\n});\n\nexport default listsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}