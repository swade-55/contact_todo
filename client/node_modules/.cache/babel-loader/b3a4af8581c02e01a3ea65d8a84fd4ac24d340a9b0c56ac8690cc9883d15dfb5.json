{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const fetchListsForContact = createAsyncThunk('lists/fetchListsForContact', async (contactId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/lists-for-contact/${contactId}`);\n    console.log('Raw response:', response);\n    if (!response.ok) {\n      throw new Error('Failed to fetch lists');\n    }\n    const data = await response.json();\n    console.log('API response:', data);\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchTodosForList = createAsyncThunk('todos/fetchTodosForList', async (listId, thunkAPI) => {\n  const response = await fetch(`/todos/${listId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch todos');\n  }\n  const todos = await response.json();\n  return todos;\n});\nexport const fetchTodosForContact = createAsyncThunk('lists/fetchTodosForContact', async (contactId, thunkAPI) => {\n  const response = await fetch(`/todos-for-contact/${contactId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch todos for contact');\n  }\n  const todos = await response.json();\n  return todos;\n});\nconst listsSlice = createSlice({\n  name: 'lists',\n  initialState: [],\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchListsForContact.fulfilled, (state, action) => {\n      return action.payload;\n    });\n  }\n});\n\n// export const listsSlice = createSlice({\n//   name: 'lists',\n//   initialState: {\n//     listsByContact: {},\n//     todos: {},\n//     status: 'idle',\n//     error: null,\n//   },\n//   reducers: {\n//     // Reducers if needed\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(fetchTodosForList.pending, (state) => {\n//         state.status = 'loading';\n//       })\n//       .addCase(fetchTodosForList.fulfilled, (state, action) => {\n//         state.status = 'succeeded';\n//         // Assuming action.meta.arg is the list ID\n//         state.todos[action.meta.arg] = action.payload;\n//       })\n//       .addCase(fetchTodosForList.rejected, (state, action) => {\n//         state.status = 'failed';\n//         state.error = action.error.message;\n//       })\n//       .addCase(fetchTodosForContact.fulfilled, (state, action) => {\n//         state.todosByContact[action.meta.arg] = action.payload;\n//       })\n//       .addCase(fetchListsForContact.pending, (state) => {\n//         state.status = 'loading';\n//       })\n//       .addCase(fetchListsForContact.rejected, (state, action) => {\n//         state.status = 'failed';\n//         // Update the state with the error message\n//         // Make sure your state has a field to store this error message\n//         state.error = action.payload?.message || 'An unknown error occurred';\n//       })\n//       .addCase(fetchListsForContact.fulfilled, (state, action) => {\n//         console.log('Fulfilled action payload:', action.payload); // Log the action payload\n//         const { contactId, lists } = action.payload;\n//         console.log(`Updating state for contact ID ${contactId} with lists:`, lists);\n//         state.listsByContact[contactId] = lists;\n//         state.status = 'succeeded';\n//       });\n//   },\n// });\n\nexport default listsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchListsForContact","contactId","rejectWithValue","response","fetch","console","log","ok","Error","data","json","error","message","fetchTodosForList","listId","thunkAPI","todos","fetchTodosForContact","listsSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n\nexport const fetchListsForContact = createAsyncThunk(\n  'lists/fetchListsForContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/lists-for-contact/${contactId}`);\n      console.log('Raw response:', response);\n      if (!response.ok) {\n        throw new Error('Failed to fetch lists');\n      }\n      const data = await response.json();\n      console.log('API response:', data);\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const fetchTodosForList = createAsyncThunk(\n  'todos/fetchTodosForList',\n  async (listId, thunkAPI) => {\n    const response = await fetch(`/todos/${listId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos');\n    }\n    const todos = await response.json();\n    return todos;\n  }\n);\n\nexport const fetchTodosForContact = createAsyncThunk(\n  'lists/fetchTodosForContact',\n  async (contactId, thunkAPI) => {\n    const response = await fetch(`/todos-for-contact/${contactId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos for contact');\n    }\n    const todos = await response.json();\n    return todos;\n  }\n);\n\n\n\nconst listsSlice = createSlice({\n  name: 'lists',\n  initialState: [],\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchListsForContact.fulfilled, (state, action) => {\n      return action.payload;\n    });\n  },\n});\n\n// export const listsSlice = createSlice({\n//   name: 'lists',\n//   initialState: {\n//     listsByContact: {},\n//     todos: {},\n//     status: 'idle',\n//     error: null,\n//   },\n//   reducers: {\n//     // Reducers if needed\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(fetchTodosForList.pending, (state) => {\n//         state.status = 'loading';\n//       })\n//       .addCase(fetchTodosForList.fulfilled, (state, action) => {\n//         state.status = 'succeeded';\n//         // Assuming action.meta.arg is the list ID\n//         state.todos[action.meta.arg] = action.payload;\n//       })\n//       .addCase(fetchTodosForList.rejected, (state, action) => {\n//         state.status = 'failed';\n//         state.error = action.error.message;\n//       })\n//       .addCase(fetchTodosForContact.fulfilled, (state, action) => {\n//         state.todosByContact[action.meta.arg] = action.payload;\n//       })\n//       .addCase(fetchListsForContact.pending, (state) => {\n//         state.status = 'loading';\n//       })\n//       .addCase(fetchListsForContact.rejected, (state, action) => {\n//         state.status = 'failed';\n//         // Update the state with the error message\n//         // Make sure your state has a field to store this error message\n//         state.error = action.payload?.message || 'An unknown error occurred';\n//       })\n//       .addCase(fetchListsForContact.fulfilled, (state, action) => {\n//         console.log('Fulfilled action payload:', action.payload); // Log the action payload\n//         const { contactId, lists } = action.payload;\n//         console.log(`Updating state for contact ID ${contactId} with lists:`, lists);\n//         state.listsByContact[contactId] = lists;\n//         state.status = 'succeeded';\n//       });\n//   },\n// });\n\nexport default listsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAGhE,OAAO,MAAMC,oBAAoB,GAAGD,gBAAgB,CAClD,4BAA4B,EAC5B,OAAOE,SAAS,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sBAAqBH,SAAU,EAAC,CAAC;IAC/DI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,QAAQ,CAAC;IACtC,IAAI,CAACA,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C;IACA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClCL,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,IAAI,CAAC;IAClC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOT,eAAe,CAACS,KAAK,CAACC,OAAO,CAAC;EACvC;AACF,CACF,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAGd,gBAAgB,CAC/C,yBAAyB,EACzB,OAAOe,MAAM,EAAEC,QAAQ,KAAK;EAC1B,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,UAASU,MAAO,EAAC,CAAC;EAChD,IAAI,CAACX,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EACA,MAAMQ,KAAK,GAAG,MAAMb,QAAQ,CAACO,IAAI,CAAC,CAAC;EACnC,OAAOM,KAAK;AACd,CACF,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAGlB,gBAAgB,CAClD,4BAA4B,EAC5B,OAAOE,SAAS,EAAEc,QAAQ,KAAK;EAC7B,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,sBAAqBH,SAAU,EAAC,CAAC;EAC/D,IAAI,CAACE,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;EACtD;EACA,MAAMQ,KAAK,GAAG,MAAMb,QAAQ,CAACO,IAAI,CAAC,CAAC;EACnC,OAAOM,KAAK;AACd,CACF,CAAC;AAID,MAAME,UAAU,GAAGpB,WAAW,CAAC;EAC7BqB,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACxB,oBAAoB,CAACyB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjE,OAAOA,MAAM,CAACC,OAAO;IACvB,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeV,UAAU,CAACW,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}