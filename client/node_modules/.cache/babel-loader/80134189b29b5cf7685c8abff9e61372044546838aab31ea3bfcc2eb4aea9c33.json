{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunk\nexport const fetchListsForContact = createAsyncThunk('lists/fetchListsForContact', async (contactId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/lists-for-contact/${contactId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch lists');\n    }\n    const data = await response.json();\n    // Directly return the data which should be an array\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const fetchAllLists = createAsyncThunk('lists/fetchAllLists', async (contactId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`/lists`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch lists');\n    }\n    const data = await response.json();\n    // Directly return the data which should be an array\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// export const fetchAllLists = createAsyncThunk(\n//   'lists/fetchAllLists',\n//   async (_, { rejectWithValue }) => {\n//     try {\n//       const response = await fetch('/lists'); // Adjust the endpoint as necessary\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch lists');\n//       }\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\nexport const fetchAllTodos = createAsyncThunk('todos/fetchAllTodos', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/todos');\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const addTodo = createAsyncThunk('todos/addTodo', async (todoData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/todos', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: todoData.title,\n        description: todoData.description,\n        completed: todoData.completed,\n        dueDate: todoData.due_date,\n        listId: todoData.list_id,\n        tags: todoData.tags\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add todo');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const addList = createAsyncThunk('lists/addList', async (listData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/lists', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(listData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add list');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const listsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchListsForContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchListsForContact.rejected, (state, action) => {\n      var _action$payload;\n      state.status = 'failed';\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) || 'An unknown error occurred';\n    }).addCase(fetchListsForContact.fulfilled, (state, action) => {\n      // Log the action payload\n      console.log('Fulfilled action payload:', action.payload);\n      // Update state with the new array of lists for the contactId\n      state.listsByContact[action.meta.arg] = action.payload;\n      state.status = 'succeeded';\n    }).addCase(addTodo.fulfilled, (state, action) => {\n      const listId = action.payload.list_id;\n      if (!state.todos[listId]) {\n        state.todos[listId] = [];\n      }\n      state.todos[listId].push(action.payload);\n    }).addCase(fetchAllTodos.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllTodos.rejected, (state, action) => {\n      var _action$payload2;\n      state.status = 'failed';\n      state.error = ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.message) || 'An unknown error occurred';\n    }).addCase(fetchAllTodos.fulfilled, (state, action) => {\n      state.allTodos = action.payload;\n      state.status = 'succeeded';\n    }).addCase(addList.pending, state => {\n      state.status = 'loading';\n    }).addCase(addList.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      const {\n        contact_id,\n        ...listData\n      } = action.payload;\n      if (!state.listsByContact[contact_id]) {\n        state.listsByContact[contact_id] = [];\n      }\n      state.listsByContact[contact_id].push(listData);\n    }).addCase(addList.rejected, (state, action) => {\n      var _action$payload3;\n      state.status = 'failed';\n      state.error = ((_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.message) || 'An unknown error occurred';\n    }).addCase(fetchAllLists.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllLists.rejected, (state, action) => {\n      var _action$payload4;\n      state.status = 'failed';\n      state.error = ((_action$payload4 = action.payload) === null || _action$payload4 === void 0 ? void 0 : _action$payload4.message) || 'An unknown error occurred';\n    }).addCase(fetchAllLists.fulfilled, (state, action) => {\n      state.allLists = action.payload;\n      state.status = 'succeeded';\n    });\n  }\n});\nexport default listsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchListsForContact","contactId","rejectWithValue","response","fetch","ok","Error","data","json","error","message","fetchAllLists","fetchAllTodos","_","addTodo","todoData","method","headers","body","JSON","stringify","title","description","completed","dueDate","due_date","listId","list_id","tags","addList","listData","listsSlice","name","initialState","reducers","extraReducers","builder","addCase","pending","state","status","rejected","action","_action$payload","payload","fulfilled","console","log","listsByContact","meta","arg","todos","push","_action$payload2","allTodos","contact_id","_action$payload3","_action$payload4","allLists","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Async thunk\nexport const fetchListsForContact = createAsyncThunk(\n  'lists/fetchListsForContact',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/lists-for-contact/${contactId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch lists');\n      }\n      const data = await response.json();\n      // Directly return the data which should be an array\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const fetchAllLists = createAsyncThunk(\n  'lists/fetchAllLists',\n  async (contactId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/lists`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch lists');\n      }\n      const data = await response.json();\n      // Directly return the data which should be an array\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n// export const fetchAllLists = createAsyncThunk(\n//   'lists/fetchAllLists',\n//   async (_, { rejectWithValue }) => {\n//     try {\n//       const response = await fetch('/lists'); // Adjust the endpoint as necessary\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch lists');\n//       }\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\nexport const fetchAllTodos = createAsyncThunk(\n  'todos/fetchAllTodos',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/todos');\n      if (!response.ok) {\n        throw new Error('Failed to fetch todos');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addTodo = createAsyncThunk(\n  'todos/addTodo',\n  async (todoData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: todoData.title,\n          description: todoData.description,\n          completed: todoData.completed,\n          dueDate: todoData.due_date, \n          listId: todoData.list_id,   \n          tags: todoData.tags,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add todo');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addList = createAsyncThunk(\n  'lists/addList',\n  async (listData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/lists', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(listData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add list');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n\nexport const listsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchListsForContact.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchListsForContact.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchListsForContact.fulfilled, (state, action) => {\n        // Log the action payload\n        console.log('Fulfilled action payload:', action.payload); \n        // Update state with the new array of lists for the contactId\n        state.listsByContact[action.meta.arg] = action.payload;\n        state.status = 'succeeded';\n      })\n      .addCase(addTodo.fulfilled, (state, action) => {\n        const listId = action.payload.list_id;\n        if (!state.todos[listId]) {\n          state.todos[listId] = [];\n        }\n        state.todos[listId].push(action.payload);\n      })\n      .addCase(fetchAllTodos.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllTodos.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchAllTodos.fulfilled, (state, action) => {\n        state.allTodos = action.payload;\n        state.status = 'succeeded';\n      })\n      .addCase(addList.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(addList.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        const { contact_id, ...listData } = action.payload;\n        if (!state.listsByContact[contact_id]) {\n          state.listsByContact[contact_id] = [];\n        }\n        state.listsByContact[contact_id].push(listData);\n      })\n      .addCase(addList.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchAllLists.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllLists.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchAllLists.fulfilled, (state, action) => {\n        state.allLists = action.payload;\n        state.status = 'succeeded';\n      });\n  },\n});\n\nexport default listsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}