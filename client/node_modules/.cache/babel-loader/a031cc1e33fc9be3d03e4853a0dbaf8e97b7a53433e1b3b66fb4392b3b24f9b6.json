{"ast":null,"code":"// companiesSlice.js\nimport{createSlice,createAsyncThunk}from'@reduxjs/toolkit';const initialState={companies:[],status:'idle',error:null};// Async thunk for fetching companies\nexport const fetchCompanies=createAsyncThunk('companies/fetchCompanies',async userId=>{const url=\"/companies/\".concat(userId);const response=await fetch(url);if(!response.ok){console.error(\"HTTP error! status: \".concat(response.status));throw new Error('Could not fetch companies');}const data=await response.json();return data;});export const addCompany=createAsyncThunk('companies/addCompany',async(companyData,_ref)=>{let{rejectWithValue}=_ref;try{const response=await fetch('/companies',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(companyData)});if(!response.ok){throw new Error('Network response was not ok');}return response.json();}catch(error){return rejectWithValue(error.message);}});export const deleteCompany=createAsyncThunk('companies/deleteCompany',async(companyId,_ref2)=>{let{rejectWithValue}=_ref2;try{const response=await fetch(\"/companies/\".concat(companyId),{method:'DELETE'});if(!response.ok){throw new Error('Network response was not ok');}return companyId;// Return the ID of the deleted company\n}catch(error){return rejectWithValue(error.message);}});export const updateCompany=createAsyncThunk('companies/updateCompany',async(companyData,_ref3)=>{let{rejectWithValue}=_ref3;try{const response=await fetch(\"/companies/\".concat(companyData.id),{method:'PATCH',headers:{'Content-Type':'application/json'},body:JSON.stringify(companyData)});if(!response.ok){throw new Error('Network response was not ok');}return response.json();}catch(error){return rejectWithValue(error.message);}});export const companiesSlice=createSlice({name:'companies',initialState,reducers:{},extraReducers:builder=>{builder.addCase(fetchCompanies.pending,state=>{console.log('Fetching companies: Loading');state.status='loading';}).addCase(fetchCompanies.fulfilled,(state,action)=>{state.status='succeeded';state.companies=action.payload;}).addCase(fetchCompanies.rejected,(state,action)=>{console.error('Fetching companies: Failed',action.error.message);state.status='failed';state.error=action.error.message;}).addCase(addCompany.pending,state=>{console.log('Fetching companies: Loading');state.status='loading';}).addCase(addCompany.fulfilled,(state,action)=>{state.status='succeeded';// Append the new company to the existing array instead of replacing it\nstate.companies.push(action.payload);}).addCase(addCompany.rejected,(state,action)=>{console.error('Fetching companies: Failed',action.error.message);state.status='failed';state.error=action.error.message;}).addCase(deleteCompany.fulfilled,(state,action)=>{state.companies=state.companies.filter(company=>company.id!==action.payload);}).addCase(updateCompany.fulfilled,(state,action)=>{const index=state.companies.findIndex(company=>company.id===action.payload.id);if(index!==-1){// Update the company in the array\nstate.companies[index]=action.payload;}else{console.warn(\"Updated company not found in the array\");}}).addCase(updateCompany.rejected,(state,action)=>{console.error('Updating company failed',action.error.message);state.error=action.error.message;});}});export default companiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","companies","status","error","fetchCompanies","userId","url","concat","response","fetch","ok","console","Error","data","json","addCompany","companyData","_ref","rejectWithValue","method","headers","body","JSON","stringify","message","deleteCompany","companyId","_ref2","updateCompany","_ref3","id","companiesSlice","name","reducers","extraReducers","builder","addCase","pending","state","log","fulfilled","action","payload","rejected","push","filter","company","index","findIndex","warn","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/companiesSlice.js"],"sourcesContent":["// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  companies: [],\n  status: 'idle', \n  error: null,\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async (userId) => {\n    const url = `/companies/${userId}`; \n    const response = await fetch(url);\n  \n    if (!response.ok) {\n      console.error(`HTTP error! status: ${response.status}`);\n      throw new Error('Could not fetch companies');\n    }\n  \n    const data = await response.json();\n    return data;\n  });\n\n  export const addCompany = createAsyncThunk('companies/addCompany', async (companyData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/companies', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n\n  export const deleteCompany = createAsyncThunk('companies/deleteCompany', async (companyId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/companies/${companyId}`, {\n        method: 'DELETE',\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return companyId;  // Return the ID of the deleted company\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  \n  \n  export const updateCompany = createAsyncThunk('companies/updateCompany', async (companyData, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`/companies/${companyData.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    \n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompanies.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(fetchCompanies.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.companies = action.payload;\n      })\n      .addCase(fetchCompanies.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addCompany.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(addCompany.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Append the new company to the existing array instead of replacing it\n        state.companies.push(action.payload);\n      })\n      .addCase(addCompany.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(deleteCompany.fulfilled, (state, action) => {\n        state.companies = state.companies.filter(company => company.id !== action.payload);\n      })\n      .addCase(updateCompany.fulfilled, (state, action) => {\n        const index = state.companies.findIndex(company => company.id === action.payload.id);\n        if (index !== -1) {\n          // Update the company in the array\n          state.companies[index] = action.payload;\n        } else {\n          console.warn(\"Updated company not found in the array\");\n        }\n      })\n      .addCase(updateCompany.rejected, (state, action) => {\n        console.error('Updating company failed', action.error.message);\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default companiesSlice.reducer;\n"],"mappings":"AAAA;AACA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAEhE,KAAM,CAAAC,YAAY,CAAG,CACnBC,SAAS,CAAE,EAAE,CACbC,MAAM,CAAE,MAAM,CACdC,KAAK,CAAE,IACT,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,cAAc,CAAGL,gBAAgB,CAAC,0BAA0B,CAAE,KAAO,CAAAM,MAAM,EAAK,CACzF,KAAM,CAAAC,GAAG,eAAAC,MAAA,CAAiBF,MAAM,CAAE,CAClC,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACH,GAAG,CAAC,CAEjC,GAAI,CAACE,QAAQ,CAACE,EAAE,CAAE,CAChBC,OAAO,CAACR,KAAK,wBAAAI,MAAA,CAAwBC,QAAQ,CAACN,MAAM,CAAE,CAAC,CACvD,KAAM,IAAI,CAAAU,KAAK,CAAC,2BAA2B,CAAC,CAC9C,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAD,IAAI,CACb,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAE,UAAU,CAAGhB,gBAAgB,CAAC,sBAAsB,CAAE,MAAOiB,WAAW,CAAAC,IAAA,GAA0B,IAAxB,CAAEC,eAAgB,CAAC,CAAAD,IAAA,CACxG,GAAI,CACF,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,YAAY,CAAE,CACzCU,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACP,WAAW,CAClC,CAAC,CAAC,CAEF,GAAI,CAACR,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAE,KAAK,CAAC,6BAA6B,CAAC,CAChD,CAEA,MAAO,CAAAJ,QAAQ,CAACM,IAAI,CAAC,CAAC,CACxB,CAAE,MAAOX,KAAK,CAAE,CACd,MAAO,CAAAe,eAAe,CAACf,KAAK,CAACqB,OAAO,CAAC,CACvC,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAAC,aAAa,CAAG1B,gBAAgB,CAAC,yBAAyB,CAAE,MAAO2B,SAAS,CAAAC,KAAA,GAA0B,IAAxB,CAAET,eAAgB,CAAC,CAAAS,KAAA,CAC5G,GAAI,CACF,KAAM,CAAAnB,QAAQ,CAAG,KAAM,CAAAC,KAAK,eAAAF,MAAA,CAAemB,SAAS,EAAI,CACtDP,MAAM,CAAE,QACV,CAAC,CAAC,CAEF,GAAI,CAACX,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAE,KAAK,CAAC,6BAA6B,CAAC,CAChD,CAEA,MAAO,CAAAc,SAAS,CAAG;AACrB,CAAE,MAAOvB,KAAK,CAAE,CACd,MAAO,CAAAe,eAAe,CAACf,KAAK,CAACqB,OAAO,CAAC,CACvC,CACF,CAAC,CAAC,CAGF,MAAO,MAAM,CAAAI,aAAa,CAAG7B,gBAAgB,CAAC,yBAAyB,CAAE,MAAOiB,WAAW,CAAAa,KAAA,GAA0B,IAAxB,CAAEX,eAAgB,CAAC,CAAAW,KAAA,CAC9G,GAAI,CACF,KAAM,CAAArB,QAAQ,CAAG,KAAM,CAAAC,KAAK,eAAAF,MAAA,CAAeS,WAAW,CAACc,EAAE,EAAI,CAC3DX,MAAM,CAAE,OAAO,CACfC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACP,WAAW,CAClC,CAAC,CAAC,CAEF,GAAI,CAACR,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAE,KAAK,CAAC,6BAA6B,CAAC,CAChD,CAEA,MAAO,CAAAJ,QAAQ,CAACM,IAAI,CAAC,CAAC,CACxB,CAAE,MAAOX,KAAK,CAAE,CACd,MAAO,CAAAe,eAAe,CAACf,KAAK,CAACqB,OAAO,CAAC,CACvC,CACF,CAAC,CAAC,CAEJ,MAAO,MAAM,CAAAO,cAAc,CAAGjC,WAAW,CAAC,CACxCkC,IAAI,CAAE,WAAW,CACjBhC,YAAY,CACZiC,QAAQ,CAAE,CAEV,CAAC,CACDC,aAAa,CAAGC,OAAO,EAAK,CAC1BA,OAAO,CACJC,OAAO,CAAChC,cAAc,CAACiC,OAAO,CAAGC,KAAK,EAAK,CAC1C3B,OAAO,CAAC4B,GAAG,CAAC,6BAA6B,CAAC,CAC1CD,KAAK,CAACpC,MAAM,CAAG,SAAS,CAC1B,CAAC,CAAC,CACDkC,OAAO,CAAChC,cAAc,CAACoC,SAAS,CAAE,CAACF,KAAK,CAAEG,MAAM,GAAK,CACpDH,KAAK,CAACpC,MAAM,CAAG,WAAW,CAC1BoC,KAAK,CAACrC,SAAS,CAAGwC,MAAM,CAACC,OAAO,CAClC,CAAC,CAAC,CACDN,OAAO,CAAChC,cAAc,CAACuC,QAAQ,CAAE,CAACL,KAAK,CAAEG,MAAM,GAAK,CACnD9B,OAAO,CAACR,KAAK,CAAC,4BAA4B,CAAEsC,MAAM,CAACtC,KAAK,CAACqB,OAAO,CAAC,CACjEc,KAAK,CAACpC,MAAM,CAAG,QAAQ,CACvBoC,KAAK,CAACnC,KAAK,CAAGsC,MAAM,CAACtC,KAAK,CAACqB,OAAO,CACpC,CAAC,CAAC,CACDY,OAAO,CAACrB,UAAU,CAACsB,OAAO,CAAGC,KAAK,EAAK,CACtC3B,OAAO,CAAC4B,GAAG,CAAC,6BAA6B,CAAC,CAC1CD,KAAK,CAACpC,MAAM,CAAG,SAAS,CAC1B,CAAC,CAAC,CACDkC,OAAO,CAACrB,UAAU,CAACyB,SAAS,CAAE,CAACF,KAAK,CAAEG,MAAM,GAAK,CAChDH,KAAK,CAACpC,MAAM,CAAG,WAAW,CAC1B;AACAoC,KAAK,CAACrC,SAAS,CAAC2C,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC,CACtC,CAAC,CAAC,CACDN,OAAO,CAACrB,UAAU,CAAC4B,QAAQ,CAAE,CAACL,KAAK,CAAEG,MAAM,GAAK,CAC/C9B,OAAO,CAACR,KAAK,CAAC,4BAA4B,CAAEsC,MAAM,CAACtC,KAAK,CAACqB,OAAO,CAAC,CACjEc,KAAK,CAACpC,MAAM,CAAG,QAAQ,CACvBoC,KAAK,CAACnC,KAAK,CAAGsC,MAAM,CAACtC,KAAK,CAACqB,OAAO,CACpC,CAAC,CAAC,CACDY,OAAO,CAACX,aAAa,CAACe,SAAS,CAAE,CAACF,KAAK,CAAEG,MAAM,GAAK,CACnDH,KAAK,CAACrC,SAAS,CAAGqC,KAAK,CAACrC,SAAS,CAAC4C,MAAM,CAACC,OAAO,EAAIA,OAAO,CAAChB,EAAE,GAAKW,MAAM,CAACC,OAAO,CAAC,CACpF,CAAC,CAAC,CACDN,OAAO,CAACR,aAAa,CAACY,SAAS,CAAE,CAACF,KAAK,CAAEG,MAAM,GAAK,CACnD,KAAM,CAAAM,KAAK,CAAGT,KAAK,CAACrC,SAAS,CAAC+C,SAAS,CAACF,OAAO,EAAIA,OAAO,CAAChB,EAAE,GAAKW,MAAM,CAACC,OAAO,CAACZ,EAAE,CAAC,CACpF,GAAIiB,KAAK,GAAK,CAAC,CAAC,CAAE,CAChB;AACAT,KAAK,CAACrC,SAAS,CAAC8C,KAAK,CAAC,CAAGN,MAAM,CAACC,OAAO,CACzC,CAAC,IAAM,CACL/B,OAAO,CAACsC,IAAI,CAAC,wCAAwC,CAAC,CACxD,CACF,CAAC,CAAC,CACDb,OAAO,CAACR,aAAa,CAACe,QAAQ,CAAE,CAACL,KAAK,CAAEG,MAAM,GAAK,CAClD9B,OAAO,CAACR,KAAK,CAAC,yBAAyB,CAAEsC,MAAM,CAACtC,KAAK,CAACqB,OAAO,CAAC,CAC9Dc,KAAK,CAACnC,KAAK,CAAGsC,MAAM,CAACtC,KAAK,CAACqB,OAAO,CACpC,CAAC,CAAC,CACN,CACF,CAAC,CAAC,CAEF,cAAe,CAAAO,cAAc,CAACmB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}