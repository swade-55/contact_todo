{"ast":null,"code":"// contactsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  contacts: [],\n  status: 'idle',\n  error: null\n};\n\n// Async thunk for fetching contacts and their lists\nexport const fetchContacts = createAsyncThunk('contacts/fetchContacts', async companyId => {\n  const url = `http://localhost:5000/company-contacts-lists/${companyId}`; // Update the URL to match your Flask route\n  const response = await fetch(url);\n  if (!response.ok) {\n    // If the response is not ok, throw an error\n    const errorData = await response.text();\n    throw new Error(errorData || 'Could not fetch contacts');\n  }\n  const data = await response.json();\n  return data;\n});\nexport const fetchAllContacts = createAsyncThunk('contacts/fetchAllContacts', async companyId => {\n  const url = `http://localhost:5000/contacts-lists`; // Update the URL to match your Flask route\n  const response = await fetch(url);\n  if (!response.ok) {\n    // If the response is not ok, throw an error\n    const errorData = await response.text();\n    throw new Error(errorData || 'Could not fetch contacts');\n  }\n  const data = await response.json();\n  return data;\n});\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {\n    // You can add reducers for any synchronous actions here\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchContacts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchContacts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // The payload should now be an array of contacts, each with their own lists\n      state.contacts = action.payload;\n    }).addCase(fetchContacts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(fetchAllContacts.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllContacts.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // The payload should now be an array of contacts, each with their own lists\n      state.contacts = action.payload;\n    }).addCase(fetchAllContacts.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default contactsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","contacts","status","error","fetchContacts","companyId","url","response","fetch","ok","errorData","text","Error","data","json","fetchAllContacts","contactsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/contactsSlice.js"],"sourcesContent":["// contactsSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  contacts: [],\n  status: 'idle',\n  error: null,\n};\n\n// Async thunk for fetching contacts and their lists\nexport const fetchContacts = createAsyncThunk('contacts/fetchContacts', async (companyId) => {\n  const url = `http://localhost:5000/company-contacts-lists/${companyId}`; // Update the URL to match your Flask route\n  const response = await fetch(url);\n  \n  if (!response.ok) {\n    // If the response is not ok, throw an error\n    const errorData = await response.text();\n    throw new Error(errorData || 'Could not fetch contacts');\n  }\n  \n  const data = await response.json();\n  return data;\n});\n\nexport const fetchAllContacts = createAsyncThunk('contacts/fetchAllContacts', async (companyId) => {\n  const url = `http://localhost:5000/contacts-lists`; // Update the URL to match your Flask route\n  const response = await fetch(url);\n  \n  if (!response.ok) {\n    // If the response is not ok, throw an error\n    const errorData = await response.text();\n    throw new Error(errorData || 'Could not fetch contacts');\n  }\n  \n  const data = await response.json();\n  return data;\n});\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState,\n  reducers: {\n    // You can add reducers for any synchronous actions here\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchContacts.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchContacts.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // The payload should now be an array of contacts, each with their own lists\n        state.contacts = action.payload;\n      })\n      .addCase(fetchContacts.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(fetchAllContacts.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllContacts.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // The payload should now be an array of contacts, each with their own lists\n        state.contacts = action.payload;\n      })\n      .addCase(fetchAllContacts.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default contactsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}