{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  lists: [],\n  status: 'idle',\n  error: null\n};\n\n// Async thunk\n\nexport const fetchAllTodos = createAsyncThunk('todos/fetchAllTodos', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/todos');\n    if (!response.ok) {\n      throw new Error('Failed to fetch todos');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const addTodo = createAsyncThunk('todos/addTodo', async (todoData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/todos', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: todoData.title,\n        description: todoData.description,\n        completed: todoData.completed,\n        dueDate: todoData.due_date,\n        listId: todoData.list_id,\n        tags: todoData.tags\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add todo');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const addList = createAsyncThunk('lists/addList', async (listData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/lists', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(listData)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to add list');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchListsForContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchListsForContact.rejected, (state, action) => {\n      var _action$payload;\n      state.status = 'failed';\n      state.error = ((_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.message) || 'An unknown error occurred';\n    }).addCase(fetchListsForContact.fulfilled, (state, action) => {\n      // Log the action payload\n      console.log('Fulfilled action payload:', action.payload);\n      // Update state with the new array of lists for the contactId\n      state.listsByContact[action.meta.arg] = action.payload;\n      state.status = 'succeeded';\n    }).addCase(addTodo.fulfilled, (state, action) => {\n      const listId = action.payload.list_id;\n      if (!state.todos[listId]) {\n        state.todos[listId] = [];\n      }\n      state.todos[listId].push(action.payload);\n    }).addCase(fetchAllTodos.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllTodos.rejected, (state, action) => {\n      var _action$payload2;\n      state.status = 'failed';\n      state.error = ((_action$payload2 = action.payload) === null || _action$payload2 === void 0 ? void 0 : _action$payload2.message) || 'An unknown error occurred';\n    }).addCase(fetchAllTodos.fulfilled, (state, action) => {\n      state.allTodos = action.payload;\n      state.status = 'succeeded';\n    }).addCase(addList.pending, state => {\n      state.status = 'loading';\n    }).addCase(addList.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      const {\n        contact_id,\n        ...listData\n      } = action.payload;\n      if (!state.listsByContact[contact_id]) {\n        state.listsByContact[contact_id] = [];\n      }\n      state.listsByContact[contact_id].push(listData);\n    }).addCase(addList.rejected, (state, action) => {\n      var _action$payload3;\n      state.status = 'failed';\n      state.error = ((_action$payload3 = action.payload) === null || _action$payload3 === void 0 ? void 0 : _action$payload3.message) || 'An unknown error occurred';\n    });\n  }\n});\nexport default listsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","lists","status","error","fetchAllTodos","_","rejectWithValue","response","fetch","ok","Error","data","json","message","addTodo","todoData","method","headers","body","JSON","stringify","title","description","completed","dueDate","due_date","listId","list_id","tags","addList","listData","listsSlice","name","reducers","extraReducers","builder","addCase","fetchListsForContact","pending","state","rejected","action","_action$payload","payload","fulfilled","console","log","listsByContact","meta","arg","todos","push","_action$payload2","allTodos","contact_id","_action$payload3","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/listsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  lists: [],\n  status: 'idle',\n  error: null,\n};\n\n// Async thunk\n\n\n\n\nexport const fetchAllTodos = createAsyncThunk(\n  'todos/fetchAllTodos',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/todos');\n      if (!response.ok) {\n        throw new Error('Failed to fetch todos');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addTodo = createAsyncThunk(\n  'todos/addTodo',\n  async (todoData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/todos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          title: todoData.title,\n          description: todoData.description,\n          completed: todoData.completed,\n          dueDate: todoData.due_date, \n          listId: todoData.list_id,   \n          tags: todoData.tags,\n        }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add todo');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nexport const addList = createAsyncThunk(\n  'lists/addList',\n  async (listData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('/lists', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(listData),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add list');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState,\n  reducers: {\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchListsForContact.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchListsForContact.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchListsForContact.fulfilled, (state, action) => {\n        // Log the action payload\n        console.log('Fulfilled action payload:', action.payload); \n        // Update state with the new array of lists for the contactId\n        state.listsByContact[action.meta.arg] = action.payload;\n        state.status = 'succeeded';\n      })\n      .addCase(addTodo.fulfilled, (state, action) => {\n        const listId = action.payload.list_id;\n        if (!state.todos[listId]) {\n          state.todos[listId] = [];\n        }\n        state.todos[listId].push(action.payload);\n      })\n      .addCase(fetchAllTodos.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllTodos.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      })\n      .addCase(fetchAllTodos.fulfilled, (state, action) => {\n        state.allTodos = action.payload;\n        state.status = 'succeeded';\n      })\n      .addCase(addList.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(addList.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        const { contact_id, ...listData } = action.payload;\n        if (!state.listsByContact[contact_id]) {\n          state.listsByContact[contact_id] = [];\n        }\n        state.listsByContact[contact_id].push(listData);\n      })\n      .addCase(addList.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload?.message || 'An unknown error occurred';\n      });\n  },\n});\n\nexport default listsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}