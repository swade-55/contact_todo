{"ast":null,"code":"var _jsxFileName = \"/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/ListsDisplay.js\",\n  _s = $RefreshSig$();\n// ListsDisplay.js\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchListsForContact } from './slices/listsSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst todoContainerStyle = {\n  padding: '20px'\n};\nconst ListsDisplay = ({\n  selectedContactId\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.contacts);\n\n  // Find the selected contact\n  let selectedContact = contacts.find(contact => contact.id === selectedContactId);\n\n  // Get the lists for the selected contact, if any\n  let lists = selectedContact ? selectedContact.lists : [];\n\n  // Fetch lists for the selected contact when it changes\n  useEffect(() => {\n    if (selectedContactId) {\n      dispatch(fetchListsForContact(selectedContactId));\n    }\n  }, [dispatch, selectedContactId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-container\",\n    children: lists.map(list => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: list.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), list.todos.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `todo-item ${todo.completed ? 'completed' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: todo.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: todo.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this)]\n      }, todo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this))]\n    }, list.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(ListsDisplay, \"SXDjhPuUadeFQ2xFNHNUrUCI1VQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = ListsDisplay;\nexport default ListsDisplay;\nvar _c;\n$RefreshReg$(_c, \"ListsDisplay\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","fetchListsForContact","jsxDEV","_jsxDEV","todoContainerStyle","padding","ListsDisplay","selectedContactId","_s","dispatch","contacts","state","selectedContact","find","contact","id","lists","className","children","map","list","title","fileName","_jsxFileName","lineNumber","columnNumber","todos","todo","completed","description","_c","$RefreshReg$"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/ListsDisplay.js"],"sourcesContent":["// ListsDisplay.js\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchListsForContact } from './slices/listsSlice';\n\n\n\nconst todoContainerStyle = {\n  padding: '20px',\n};\n\nconst ListsDisplay = ({ selectedContactId }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector((state) => state.contacts.contacts);\n  \n  // Find the selected contact\n  let selectedContact = contacts.find(contact => contact.id === selectedContactId);\n  \n  // Get the lists for the selected contact, if any\n  let lists = selectedContact ? selectedContact.lists : [];\n\n  // Fetch lists for the selected contact when it changes\n  useEffect(() => {\n    if (selectedContactId) {\n      dispatch(fetchListsForContact(selectedContactId));\n    }\n  }, [dispatch, selectedContactId]);\n\n  return (\n    <div className=\"todo-container\">\n      {lists.map((list) => (\n        <div key={list.id}>\n          <h3>{list.title}</h3>\n          {list.todos.map((todo) => (\n            <div className={`todo-item ${todo.completed ? 'completed' : ''}`} key={todo.id}>\n              <p>{todo.title}</p>\n              <p>{todo.description}</p>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ListsDisplay;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,oBAAoB,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI3D,MAAMC,kBAAkB,GAAG;EACzBC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAkB,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,QAAQ,GAAGX,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAACD,QAAQ,CAACA,QAAQ,CAAC;;EAEhE;EACA,IAAIE,eAAe,GAAGF,QAAQ,CAACG,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKR,iBAAiB,CAAC;;EAEhF;EACA,IAAIS,KAAK,GAAGJ,eAAe,GAAGA,eAAe,CAACI,KAAK,GAAG,EAAE;;EAExD;EACAlB,SAAS,CAAC,MAAM;IACd,IAAIS,iBAAiB,EAAE;MACrBE,QAAQ,CAACR,oBAAoB,CAACM,iBAAiB,CAAC,CAAC;IACnD;EACF,CAAC,EAAE,CAACE,QAAQ,EAAEF,iBAAiB,CAAC,CAAC;EAEjC,oBACEJ,OAAA;IAAKc,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5BF,KAAK,CAACG,GAAG,CAAEC,IAAI,iBACdjB,OAAA;MAAAe,QAAA,gBACEf,OAAA;QAAAe,QAAA,EAAKE,IAAI,CAACC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACpBL,IAAI,CAACM,KAAK,CAACP,GAAG,CAAEQ,IAAI,iBACnBxB,OAAA;QAAKc,SAAS,EAAG,aAAYU,IAAI,CAACC,SAAS,GAAG,WAAW,GAAG,EAAG,EAAE;QAAAV,QAAA,gBAC/Df,OAAA;UAAAe,QAAA,EAAIS,IAAI,CAACN;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnBtB,OAAA;UAAAe,QAAA,EAAIS,IAAI,CAACE;QAAW;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAF4CE,IAAI,CAACZ,EAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGzE,CACN,CAAC;IAAA,GAPML,IAAI,CAACL,EAAE;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQZ,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjB,EAAA,CAhCIF,YAAY;EAAA,QACCN,WAAW,EACXD,WAAW;AAAA;AAAA+B,EAAA,GAFxBxB,YAAY;AAkClB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}