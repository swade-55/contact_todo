{"ast":null,"code":"// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  companies: [],\n  status: 'idle',\n  error: null\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async userId => {\n  if (userId === undefined) {\n    userId = '1';\n  }\n  const url = `http://localhost:5000/companies/${userId}`;\n  const response = await fetch(url);\n  if (!response.ok) {\n    console.error(`HTTP error! status: ${response.status}`);\n    throw new Error('Could not fetch companies');\n  }\n  const data = await response.json();\n  return data;\n});\nexport const addCompany = createAsyncThunk('companies/addCompany', async (companyData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('http://localhost:5000/companies', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const deleteCompany = createAsyncThunk('companies/deleteCompany', async (companyId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`http://localhost:5000/companies/${companyId}`, {\n      method: 'DELETE'\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return companyId; // Return the ID of the deleted company\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const updateCompany = createAsyncThunk('companies/updateCompany', async (companyData, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`http://localhost:5000/companies/${companyData.id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(companyData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCompanies.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(fetchCompanies.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.companies = action.payload;\n    })\n    // .addCase(fetchCompanies.fulfilled, (state, action) => {\n    //   state.status = 'succeeded';\n    //   state.companies = Array.isArray(action.payload) ? action.payload : [action.payload];\n    // })\n    .addCase(fetchCompanies.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(addCompany.pending, state => {\n      console.log('Fetching companies: Loading');\n      state.status = 'loading';\n    }).addCase(addCompany.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Append the new company to the existing array instead of replacing it\n      state.companies.push(action.payload);\n    }).addCase(addCompany.rejected, (state, action) => {\n      console.error('Fetching companies: Failed', action.error.message);\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(deleteCompany.fulfilled, (state, action) => {\n      state.companies = state.companies.filter(company => company.id !== action.payload);\n    }).addCase(updateCompany.fulfilled, (state, action) => {\n      const index = state.companies.findIndex(company => company.id === action.payload.id);\n      if (index !== -1) {\n        // Update the company in the array\n        state.companies[index] = action.payload;\n      } else {\n        // This case handles if for some reason the company is not found; you might decide to add it instead\n        console.warn(\"Updated company not found in the array\");\n        // Optionally add the company to the array\n        // state.companies.push(action.payload);\n      }\n    }).addCase(updateCompany.rejected, (state, action) => {\n      console.error('Updating company failed', action.error.message);\n      state.error = action.error.message;\n    });\n  }\n});\nexport default companiesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","companies","status","error","fetchCompanies","userId","undefined","url","response","fetch","ok","console","Error","data","json","addCompany","companyData","rejectWithValue","method","headers","body","JSON","stringify","message","deleteCompany","companyId","updateCompany","id","companiesSlice","name","reducers","extraReducers","builder","addCase","pending","state","log","fulfilled","action","payload","rejected","push","filter","company","index","findIndex","warn","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/companiesSlice.js"],"sourcesContent":["// companiesSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\nconst initialState = {\n  companies: [],\n  status: 'idle', \n  error: null,\n};\n\n// Async thunk for fetching companies\nexport const fetchCompanies = createAsyncThunk('companies/fetchCompanies', async (userId) => {\n\n  if (userId === undefined) {\n    userId = '1'; \n}\n    const url = `http://localhost:5000/companies/${userId}`; \n    const response = await fetch(url);\n  \n    if (!response.ok) {\n      console.error(`HTTP error! status: ${response.status}`);\n      throw new Error('Could not fetch companies');\n    }\n  \n    const data = await response.json();\n    return data;\n  });\n\n  export const addCompany = createAsyncThunk('companies/addCompany', async (companyData, { rejectWithValue }) => {\n    try {\n      const response = await fetch('http://localhost:5000/companies', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n\n  export const deleteCompany = createAsyncThunk('companies/deleteCompany', async (companyId, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`http://localhost:5000/companies/${companyId}`, {\n        method: 'DELETE',\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return companyId;  // Return the ID of the deleted company\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n  \n  \n  export const updateCompany = createAsyncThunk('companies/updateCompany', async (companyData, { rejectWithValue }) => {\n    try {\n      const response = await fetch(`http://localhost:5000/companies/${companyData.id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(companyData),\n      });\n  \n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n  \n      return response.json();\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  });\n\nexport const companiesSlice = createSlice({\n  name: 'companies',\n  initialState,\n  reducers: {\n    \n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchCompanies.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(fetchCompanies.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.companies = action.payload;\n      })\n      // .addCase(fetchCompanies.fulfilled, (state, action) => {\n      //   state.status = 'succeeded';\n      //   state.companies = Array.isArray(action.payload) ? action.payload : [action.payload];\n      // })\n      .addCase(fetchCompanies.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(addCompany.pending, (state) => {\n        console.log('Fetching companies: Loading');\n        state.status = 'loading';\n      })\n      .addCase(addCompany.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // Append the new company to the existing array instead of replacing it\n        state.companies.push(action.payload);\n      })\n      .addCase(addCompany.rejected, (state, action) => {\n        console.error('Fetching companies: Failed', action.error.message);\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(deleteCompany.fulfilled, (state, action) => {\n        state.companies = state.companies.filter(company => company.id !== action.payload);\n      })\n      .addCase(updateCompany.fulfilled, (state, action) => {\n        const index = state.companies.findIndex(company => company.id === action.payload.id);\n        if (index !== -1) {\n          // Update the company in the array\n          state.companies[index] = action.payload;\n        } else {\n          // This case handles if for some reason the company is not found; you might decide to add it instead\n          console.warn(\"Updated company not found in the array\");\n          // Optionally add the company to the array\n          // state.companies.push(action.payload);\n        }\n      })\n      .addCase(updateCompany.rejected, (state, action) => {\n        console.error('Updating company failed', action.error.message);\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default companiesSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}