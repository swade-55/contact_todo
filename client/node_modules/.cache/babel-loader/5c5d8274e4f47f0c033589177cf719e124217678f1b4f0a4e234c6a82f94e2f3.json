{"ast":null,"code":"// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// const initialState = {\n//   lists: [],\n//   status: 'idle',\n//   error: null,\n// };\n\n// // Async thunk\n// export const addTodo = createAsyncThunk(\n//   'todos/addTodo',\n//   async (todoData, { rejectWithValue }) => {\n//     try {\n//       const response = await fetch('/todos', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           title: todoData.title,\n//           description: todoData.description,\n//           completed: todoData.completed,\n//           dueDate: todoData.due_date, \n//           listId: todoData.list_id,   \n//           tags: todoData.tags,\n//         }),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to add todo');\n//       }\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\n// // export const addList = createAsyncThunk(\n// //   'lists/addList',\n// //   async (listData, { rejectWithValue }) => {\n// //     try {\n// //       const response = await fetch('/lists', {\n// //         method: 'POST',\n// //         headers: {\n// //           'Content-Type': 'application/json',\n// //         },\n// //         body: JSON.stringify(listData),\n// //       });\n// //       if (!response.ok) {\n// //         throw new Error('Failed to add list');\n// //       }\n// //       const data = await response.json();\n// //       return data;\n// //     } catch (error) {\n// //       return rejectWithValue(error.message);\n// //     }\n// //   }\n// // );\n\n// export const listsSlice = createSlice({\n//   name: 'lists',\n//   initialState,\n//   reducers: {\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(addTodo.fulfilled, (state, action) => {\n//         const listId = action.payload.list_id;\n//         if (!state.todos[listId]) {\n//           state.todos[listId] = [];\n//         }\n//         state.todos[listId].push(action.payload);\n//       })\n//       // .addCase(addList.pending, (state) => {\n//       //   state.status = 'loading';\n//       // })\n//       // .addCase(addList.fulfilled, (state, action) => {\n//       //   state.status = 'succeeded';\n//       //   console.log(action.payload)\n//         // const { contact_id, ...listData } = action.payload;\n//         // if (!state.listsByContact[contact_id]) {\n//         //   state.listsByContact[contact_id] = [];\n//         // }\n//         // state.listsByContact[contact_id].push(listData);\n//       // })\n//       // .addCase(addList.rejected, (state, action) => {\n//       //   state.status = 'failed';\n//       //   state.error = action.payload?.message || 'An unknown error occurred';\n//       // });\n//   },\n// });\n\n// export default listsSlice.reducer;","map":{"version":3,"names":[],"sources":["/home/samuelrcwade/Development/Code/Phase4/contact_todo/client/src/components/slices/listsSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// const initialState = {\n//   lists: [],\n//   status: 'idle',\n//   error: null,\n// };\n\n// // Async thunk\n// export const addTodo = createAsyncThunk(\n//   'todos/addTodo',\n//   async (todoData, { rejectWithValue }) => {\n//     try {\n//       const response = await fetch('/todos', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           title: todoData.title,\n//           description: todoData.description,\n//           completed: todoData.completed,\n//           dueDate: todoData.due_date, \n//           listId: todoData.list_id,   \n//           tags: todoData.tags,\n//         }),\n//       });\n//       if (!response.ok) {\n//         throw new Error('Failed to add todo');\n//       }\n//       const data = await response.json();\n//       return data;\n//     } catch (error) {\n//       return rejectWithValue(error.message);\n//     }\n//   }\n// );\n\n// // export const addList = createAsyncThunk(\n// //   'lists/addList',\n// //   async (listData, { rejectWithValue }) => {\n// //     try {\n// //       const response = await fetch('/lists', {\n// //         method: 'POST',\n// //         headers: {\n// //           'Content-Type': 'application/json',\n// //         },\n// //         body: JSON.stringify(listData),\n// //       });\n// //       if (!response.ok) {\n// //         throw new Error('Failed to add list');\n// //       }\n// //       const data = await response.json();\n// //       return data;\n// //     } catch (error) {\n// //       return rejectWithValue(error.message);\n// //     }\n// //   }\n// // );\n\n\n// export const listsSlice = createSlice({\n//   name: 'lists',\n//   initialState,\n//   reducers: {\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(addTodo.fulfilled, (state, action) => {\n//         const listId = action.payload.list_id;\n//         if (!state.todos[listId]) {\n//           state.todos[listId] = [];\n//         }\n//         state.todos[listId].push(action.payload);\n//       })\n//       // .addCase(addList.pending, (state) => {\n//       //   state.status = 'loading';\n//       // })\n//       // .addCase(addList.fulfilled, (state, action) => {\n//       //   state.status = 'succeeded';\n//       //   console.log(action.payload)\n//         // const { contact_id, ...listData } = action.payload;\n//         // if (!state.listsByContact[contact_id]) {\n//         //   state.listsByContact[contact_id] = [];\n//         // }\n//         // state.listsByContact[contact_id].push(listData);\n//       // })\n//       // .addCase(addList.rejected, (state, action) => {\n//       //   state.status = 'failed';\n//       //   state.error = action.payload?.message || 'An unknown error occurred';\n//       // });\n//   },\n// });\n\n// export default listsSlice.reducer;\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}