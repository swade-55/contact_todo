{"ast":null,"code":"var _jsxFileName = \"/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/ManageToDo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from './slices/contactsSlice';\nimport { fetchListsAndTodosForContact } from './slices/listsSlice'; // Updated import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageToDo = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [selectedContactId, setSelectedContactId] = useState('');\n  const contacts = useSelector(state => state.contacts.contacts);\n  const lists = useSelector(state => state.lists.lists);\n\n  // Fetch all contacts on component mount\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // Fetch lists and todos when a contact is selected\n  useEffect(() => {\n    if (selectedContactId) {\n      dispatch(fetchListsAndTodosForContact(selectedContactId));\n    }\n  }, [selectedContactId, dispatch]);\n  const handleContactChange = e => {\n    setSelectedContactId(e.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: handleContactChange,\n      value: selectedContactId,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), contacts.map(contact => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: contact.id,\n        children: contact.name\n      }, contact.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: lists.map(list => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: list.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: list.todos.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: todo.title\n          }, todo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, list.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageToDo, \"3P7hqlAXZsOJaXKC+JDhMvXzC80=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = ManageToDo;\nexport default ManageToDo;\nvar _c;\n$RefreshReg$(_c, \"ManageToDo\");","map":{"version":3,"names":["React","useState","useEffect","useSelector","useDispatch","fetchContacts","fetchListsAndTodosForContact","jsxDEV","_jsxDEV","ManageToDo","_s","dispatch","selectedContactId","setSelectedContactId","contacts","state","lists","handleContactChange","e","target","value","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","contact","id","name","list","title","todos","todo","_c","$RefreshReg$"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/ManageToDo.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from './slices/contactsSlice';\nimport { fetchListsAndTodosForContact } from './slices/listsSlice'; // Updated import\n\nconst ManageToDo = () => {\n  const dispatch = useDispatch();\n  const [selectedContactId, setSelectedContactId] = useState('');\n  const contacts = useSelector((state) => state.contacts.contacts);\n  const lists = useSelector((state) => state.lists.lists);\n\n  // Fetch all contacts on component mount\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  // Fetch lists and todos when a contact is selected\n  useEffect(() => {\n    if (selectedContactId) {\n      dispatch(fetchListsAndTodosForContact(selectedContactId));\n    }\n  }, [selectedContactId, dispatch]);\n\n  const handleContactChange = (e) => {\n    setSelectedContactId(e.target.value);\n  };\n\n  return (\n    <div>\n      <select onChange={handleContactChange} value={selectedContactId}>\n        <option value=\"\">Select Contact</option>\n        {contacts.map((contact) => (\n          <option key={contact.id} value={contact.id}>\n            {contact.name}\n          </option>\n        ))}\n      </select>\n\n      {/* Render lists and todos for the selected contact */}\n      <div>\n        {lists.map((list) => (\n          <div key={list.id}>\n            <h3>{list.title}</h3>\n            <ul>\n              {list.todos.map((todo) => (\n                <li key={todo.id}>{todo.title}</li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ManageToDo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}