{"ast":null,"code":"// Redux Thunk to fetch lists and their associated todos for a contact\nexport const fetchListsAndTodosForContact = createAsyncThunk('lists/fetchListsAndTodosForContact', async (contactId, thunkAPI) => {\n  const response = await fetch(`/contact-lists-todos/${contactId}`);\n  if (!response.ok) {\n    throw new Error('Failed to fetch lists and todos');\n  }\n  const listsAndTodos = await response.json();\n  return listsAndTodos;\n});\n\n// Slice to manage lists and their associated todos\nexport const listsSlice = createSlice({\n  name: 'lists',\n  initialState: {\n    lists: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    // Add any reducers if needed\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchListsAndTodosForContact.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchListsAndTodosForContact.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // Assumes the payload is an array of lists, each with a 'todos' array\n      state.lists = action.payload;\n    }).addCase(fetchListsAndTodosForContact.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default listsSlice.reducer;","map":{"version":3,"names":["fetchListsAndTodosForContact","createAsyncThunk","contactId","thunkAPI","response","fetch","ok","Error","listsAndTodos","json","listsSlice","createSlice","name","initialState","lists","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["/home/samuelrcwade/Development/Code/Phase4/task_arena/client/src/components/slices/listsSlice.js"],"sourcesContent":["// Redux Thunk to fetch lists and their associated todos for a contact\nexport const fetchListsAndTodosForContact = createAsyncThunk(\n    'lists/fetchListsAndTodosForContact',\n    async (contactId, thunkAPI) => {\n      const response = await fetch(`/contact-lists-todos/${contactId}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch lists and todos');\n      }\n      const listsAndTodos = await response.json();\n      return listsAndTodos;\n    }\n  );\n  \n  // Slice to manage lists and their associated todos\n  export const listsSlice = createSlice({\n    name: 'lists',\n    initialState: {\n      lists: [],\n      status: 'idle',\n      error: null,\n    },\n    reducers: {\n      // Add any reducers if needed\n    },\n    extraReducers: (builder) => {\n      builder\n        .addCase(fetchListsAndTodosForContact.pending, (state) => {\n          state.status = 'loading';\n        })\n        .addCase(fetchListsAndTodosForContact.fulfilled, (state, action) => {\n          state.status = 'succeeded';\n          // Assumes the payload is an array of lists, each with a 'todos' array\n          state.lists = action.payload;\n        })\n        .addCase(fetchListsAndTodosForContact.rejected, (state, action) => {\n          state.status = 'failed';\n          state.error = action.error.message;\n        });\n    },\n  });\n  \n  export default listsSlice.reducer;\n  "],"mappings":"AAAA;AACA,OAAO,MAAMA,4BAA4B,GAAGC,gBAAgB,CACxD,oCAAoC,EACpC,OAAOC,SAAS,EAAEC,QAAQ,KAAK;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,wBAAuBH,SAAU,EAAC,CAAC;EACjE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EACpD;EACA,MAAMC,aAAa,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAC3C,OAAOD,aAAa;AACtB,CACF,CAAC;;AAED;AACA,OAAO,MAAME,UAAU,GAAGC,WAAW,CAAC;EACpCC,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACR;EAAA,CACD;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACpB,4BAA4B,CAACqB,OAAO,EAAGC,KAAK,IAAK;MACxDA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACpB,4BAA4B,CAACuB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAClEF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1B;MACAO,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACpB,4BAA4B,CAAC0B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACjEF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAejB,UAAU,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}